{
    "content": {
        "powerVoting": "Power Voting",
        "tools": "工具",
        "pleaseWait": "请等待",
        "noData": "无数据",
        "created": "创建于",
        "createProposal": "创建提案",
        "endTime": "结束时间",
        "startTime": "开始时间",
        "all": "全部",
        "pending": "待办",
        "progressing": "进行中",
        "voteCounting": "计票",
        "complete": "完成",
        "operationCanceled": "操作取消",
        "storingChain": "数据上链中！",
        "storedSuccessfully": "数据上链成功！",
        "saveFail": "保存失败",
        "saveSuccess": "保存成功",
        "revokeYourself": "您不能自行撤销!",
        "alreadyRevoked": "您已撤销！",
        "alreadyApproved": "您已批准!",
        "noPropose": "不能向自己提案",
        "activeProposal": "此地址已有一个活跃提案 ",
        "twoFIPRevoke": "必须有两名以上的FIP编辑者方可撤销",
        "selectAddress": "请选择一个地址！",
        "inputAddress": "请输入地址",
        "fipCreateProposals": "请选择一个FIP编辑者来创建提案！",
        "iDDuplicated": "您的Miner ID重复！",
        "checkID": "请检查您的Miner ID！",
        "expirationTime": "截止时间不得早于当前时间！",
        "startTimeLoss": "开始时间不得早于当前时间！",
        "blockHeightLoss": "获取power区块高度获取失败！",
        "gettingPower": "正在获取地址的权重，请等待!",
        "chooseVote": "请选择一个选项进行投票！",
        "voteSuccessful": "投票成功",
        "dataStoredFailed": "数据上链失败！",
        "saveDataFail": "保存数据失败",
        "addressEditor": "此地址已经是一个 FIP 编辑者",
        "storing": "存储中",
        "wrongNetwork": "网络错误",
        "passed": "通过",
        "rejected": "驳回",
        "proposalTitle": "提案名称",
        "proposalTitleRequired": "提案名称为必填项",
        "description": "描述",
        "describeFIPObjectives": "请描述 FIP 目标、实施细节、风险，并附上 GitHub 链接以确保透明公开。查看模板",
        "markdownFormattingInField": "您可以在文本输入区域中使用 Markdown 格式",
        "here": "此处",
        "proposalDescriptionRequired": "提案描述为必填项",
        "proposalTimeRequired": "提案时间为必填项",
        "votingTime": "投票时间",
        "timezone": "时区",
        "proposalTimeZoneRequired": "提案截止时间为必填项",
        "back": "返回",
        "cancel": "取消",
        "saveDraft": "保存草稿",
        "codePractices": "行为准则和最佳实践",
        "proposalsClear": "提案应清晰、简洁，并着重关注具体的改进或变更。FIP 必须遵守 Filecoin 社区指南“",
        "castVote": "投票",
        "details": "详情",
        "createdby": "创建人",
        "blockHeight": "区块高度",
        "UCANDelegates": "UCAN委托",
        "minerIDsManagement": "Miner ID管理",
        "propose": "提议",
        "approve": "批准",
        "revoke": "撤销",
        "results": "结果",
        "fipEditorApprove": "FIP编辑者批准",
        "votes": "选票",
        "proofRequired": "证明为必须项",
        "audRequired": "Aud为必须项",
        "uRLRequired": "URL为必填项",
        "previous": "历史",
        "filecoin": "Filecoin",
        "info": "信息",
        "FIPEditorRevoke": "FIP编辑者撤销",
        "action": "操作",
        "revokeRatio": "撤销率",
        "fipEditorAddress": "FIP编辑者地址",
        "status": "状态",
        "FIPEditor": "FIP编辑者",
        "revokeFIPEditor": "撤销FIP编辑者",
        "isConfirmRevoke": "确认撤销？",
        "yes": "是",
        "no": "否",
        "showMore": "更多",
        "showLess": "收起",
        "approveRatio": "赞成率",
        "address": "地址",
        "approveFIPEditor": "批准FIP编辑者",
        "isConfirmApprove": "确认批准？",
        "fipEditorPropose": "FIP编辑者提议",
        "savedDescriptionCharacters": "请确保描述在 2048 个字符以内",
        "createProposals": "创建提案",
        "inputEditorAddress": "请输入编辑者地址",
        "inputProposeInfo": "请输入提议信息",
        "inputMinerIDmultiplEseparate": "请输入Miner ID（如有多个 Miner ID，使用逗号隔开）",
        "proposeInfo": "提案信息",
        "proposeType": "提案类型",
        "editorAddress": "编辑者地址",
        "question": "问题",
        "approved": "已批准",
        "revoked": "已撤销",
        "role": "角色",
        "power": "算力",
        "totalPower": "总算力",
        "percent": "百分比",
        "vote": "投票",
        "ucanType": "UCAN类型",
        "issuer": "发布人",
        "audience": "受众",
        "filecoinAddress": "请输入您的Filecoin地址",
        "proof": "证明",
        "yourGithubAccount": "请输入您的Github账号",
        "signature": "签名",
        "ucanDelegatesAuthorize": "UCAN委托 (授权)",
        "authorize": "授权",
        "sign": "签名",
        "ucanDelegatesDeauthorize": "UCAN委托 (取消授权)",
        "deauthorize": "取消授权",
        "submit": "提交",
        "totalPercent": "总百分比",
        "documentation": "文档",
        "resources": "资源库",
        "poweredBy": "联合出品",
        "allRightReserved": "版权所有 © 2024",
        "partners": "合作伙伴",
        "contactSupport": "联系&支持",
        "legal": "法律责任",
        "privacyTerms": "隐私条款",
        "codeConduct": "行为准则",
        "discord": "Discord",
        "slack": "Slack",
        "FAQs": "问答",
        "reject": "驳回",
        "connectWallet": "连接钱包",
        "fipEditorManagement": "FIP编辑管理",
        "searchProposals": "搜索提案",
        "rejectedSignature": "签名被拒绝！",
        "filecion_authorize_doc": "\n# I. 如何使用UCAN签名\n\n1. 首先您需要安装 Go 工具链，您可以在此处(https://go.dev/doc/install)找到说明，Go版本>=1.20。 \n\n2. 获取UCAN签名工具的代码。\n\n```\ngit clone https://gitlab.com/storswiftlabs/wh/dapp/power-voting/ucan-utils\n```\n\n3. 进入utils目录并安装依赖项。\n\n```\ngo mod tidy\n```\n\n4. 构建二进制文件。\n\n```\ngo build -o signature\n```\n\n5. 运行。\n\n```\n./signature --aud 0x257c072306d848A6fd2f662Aead6855A7738dFEF --act add --privateKey <your_private_key> --keyType secp256k1\n```\n\n6. 返回一个UCAN签名。\n\n```\neyJhbGciOiJzZWNwMjU2azEiLCJ0eXBlIjoiSldUIiwidmVyc2lvbiI6IjAuMC4xIn0.eyJpc3MiOiJ0MXkyNHY2Y3BiNzNwbnVkM2tlcHFoN3Zsb2h1YmNqYTR6emtrZ2MyeSIsImF1ZCI6IjB4MjU3YzA3MjMwNmQ4NDhBNmZkMmY2NjJBZWFkNjg1NUE3NzM4ZEZFRiIsImFjdCI6ImFkZCIsInByZiI6IiJ9.qYl0CQhK_EnqoKMf7Ph6x1gx1LW875y-nL__iH89s6MocYgfEZoETWAuPwwIU21LA4f-2LntzgcxdQv0Eks7bwA\n```\n\n\n# II. F1、F2 Owner、F3地址的授权\n\n## 1. 添加授权\n\n### 1.1 创建Filecoin账户对Eth账户授权的UCAN签名\n\n[按照这个流程创建一个act为add的UCAN签名。](#i-如何使用ucan签名)\n\n<span style=\"color:red;\">Attention: 注意：act字段需要设置为add</span>\n\n参数需要更改为如下:\n\n```\nvar (\n\\taud = \"0x257c072306d848A6fd2f662Aead6855A7738dFEF\"  //需要授权的Eth地址。\n\\tact = \"add\"  // 动作，这里需要填写为add。\n\\tprivateKeyStr = \"<your_private_key>\"  // 填写Filecoin账户对应的私钥。 \n\\tkeyTypeStr = \"secp256k1\"  // Filecoin地址的加密算法如：f1开头的地址使用secp256k1，f3开头的地址使用bls\n)\n```\n\n### 1.2 创建Eth账户对Filecoin账户授权的UCAN签名 \n\n1. 打开网站：https://vote.storswift.io。\n\n 2. 点击UCAN Delegates 进行授权。\n\n<p>\n    <img src=\"/images/img_1.png\" />\n</p>\n\n3. UCAN Type 选择Filecoin。 \n\n4. Aud填写需要授权的Filecoin账户地址，此Filecoin账户地址为[1.1、创建Filecoin账户对Eth账户授权的UCAN签名](#11创建Filecoin账户对Eth账户授权的UCAN签名)中填入Filecoin私钥对应的账户地址。\n\n5. Proof 填写在[1.1、创建Filecoin账户对Eth账户授权的UCAN签名](#11创建Filecoin账户对Eth账户授权的UCAN签名)中创建的Filecoin账户签名的UCAN。\n\n<p>\n    <img src=\"/images/img.png\" />\n</p>\n\n### 1.3 授权\n\n参数填写完毕，点击Authorize按钮，对消息进行签名并发送到链上，授权成功。\n",
        "filecion_deauthorize_doc": " \n# I. 如何使用UCAN签名\n\n1. 首先您需要安装 Go 工具链，您可以在此处(https://go.dev/doc/install)找到说明，Go版本>=1.20。 \n\n2. 获取UCAN签名工具的代码.\n\n```\ngit clone https://gitlab.com/storswiftlabs/wh/dapp/power-voting/ucan-utils\n```\n\n3. 进入utils目录并安装依赖项。\n\n```\ngo mod tidy\n```\n\n4. 构建二进制文件。\n\n```\ngo build -o signature\n```\n\n5. 运行。\n\n```\n./signature --aud 0x257c072306d848A6fd2f662Aead6855A7738dFEF --act add --privateKey <your_private_key> --keyType secp256k1\n```\n\n6. 返回一个UCAN签名。\n\n```\neyJhbGciOiJzZWNwMjU2azEiLCJ0eXBlIjoiSldUIiwidmVyc2lvbiI6IjAuMC4xIn0.eyJpc3MiOiJ0MXkyNHY2Y3BiNzNwbnVkM2tlcHFoN3Zsb2h1YmNqYTR6emtrZ2MyeSIsImF1ZCI6IjB4MjU3YzA3MjMwNmQ4NDhBNmZkMmY2NjJBZWFkNjg1NUE3NzM4ZEZFRiIsImFjdCI6ImFkZCIsInByZiI6IiJ9.qYl0CQhK_EnqoKMf7Ph6x1gx1LW875y-nL__iH89s6MocYgfEZoETWAuPwwIU21LA4f-2LntzgcxdQv0Eks7bwA\n```\n\n# II. 取消授权\n\n## 1. 创建Filecoin账户对Eth账户取消授权的UCAN签名\n\n<span style=\"color:red;\">注意：act字段需要设置为del.</span>\n\n[按照这个流程创建一个act为del的UCAN签名。](#i-如何使用ucan签名)\n\n参数需要更改为如下:\n\n```\nvar (\n\\taud = \"0x257c072306d848A6fd2f662Aead6855A7738dFEF\"  //需要授权的Eth地址\n\\tact = \"del\"  // 动作，这里需要填写为del\n\\tprivateKeyStr = \"<your_private_key>\"  // 填写Filecoin账户对应的私钥\n\\tkeyTypeStr = \"secp256k1\"  // Filecoin地址的加密算法如：f1开头的地址使用secp256k1，f3开头的地址使用bls\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n)\n```\n\n## 2. 创建Eth账户对Filecoin账户取消授权的UCAN签名\n\n**前提条件：Eth账户已有UCAN授权**。\n\n2.1 打开网站：https://vote.storswift.io。\n\n2.2 点击UCAN Delegates 取消授权.  网站会监听Eth账户是否存在UCAN授权. 如果存在这次操作就为取消授权。\n\n<p>\n    <img src=\"/images/img_1.png\" />\n</p>\n\n## 3. Iss、Aud均是网站自动填写，您只需要在Proof处填写在[1.1、创建filecoin账户对Eth账户取消授权的UCAN签名](#11创建filecoin账户对Eth账户取消授权的UCAN签名)中创建的Filecoin账户的签名的UCAN。\n\n<p>\n    <img src=\"/images/img_2.png\" />\n</p>\n",
        "github_authorize_doc": "\n# I. Developer 授权\n\n## 1. 添加授权\n\n### 1.1 创建Eth账户对Github账户授权的UCAN签名\n\n#### 1. 打开网站：https://vote.storswift.io。\n\n#### 2. 点击UCAN Delegates 进行授权。\n\n<p>\n    <img src=\"/images/img_2.png\" />\n</p>\n\n#### 3. UCAN Type 选择Github。\n\n#### 4. Aud填写需要授权的Github用户名。\n\n<p>\n    <img src=\"/images/img_4.png\" />\n</p>\n\n#### 5. 点击Sign生成，Signature就是Eth对Github授权的UCAN签名，在后续的操作中需要将Signature发送到Github仓库。\n\n<p>\n    <img src=\"/images/img_5.png\" />\n</p>\n\n### 1.2 在Github上创建一个初始化的公开仓库\n\n#### 选中Public和 Add a README file，仓库名称可以自定义命名，没有特殊需求，此处演示使用ucan作为仓库名称。\n\n<p>\n    <img src=\"/images/img_3.png\" />\n</p>\n\n### 1.3 创建一个用于上传UCAN签名到仓库的Token\n\n#### 1. 在 [Github Settings](https://github.com/settings/profile) 中，选择Developer settings。\n\n\n<p>\n    <img src=\"/images/img_7.png\" />\n</p>\n\n#### 2. 按照下图中的4步开始创建Token。\n\n<p>\n    <img src=\"/images/img_8.png\" />\n</p>\n\n#### 3. 选中write:packages，Token名称可以自定义命名，没有特殊需求，此处演示使用ucan作为Token名称。\n\n<p>\n    <img src=\"/images/img_9.png\" />\n</p>\n\n#### 4. 保存好Token，离开页面以后就无法查看Token。\n\n<p>\n    <img src=\"/images/img_6.png\" />\n</p>\n\n### 1.4 上传Eth对Github授权的UCAN签名到Github仓库\n\n#### 1. 命令\n\n```\n  curl -L \\\\\n  -X POST \\\\\n  -H \"Accept: application/vnd.Github+json\" \\\\\n  -H \"Authorization: Bearer <TOKEN>\" \\\\\n  -H \"X-Github-Api-Version: 2022-11-28\" \\\\\n  https://api.Github.com/repos/<OWNER>/<REPO>/git/blobs \\\\\n  -d '{\"content\":\"<CONTENT>\",\"encoding\":\"utf-8\"}'\n  \n```\n\n#### 2. 示例：\n\n此处的OWNER则是[1.1、创建Eth账户对Github账户授权的UCAN签名])填入的Aud对应的Github用户名。\n\n此处的UCAN签名则是[1.1、创建Eth账户对Github账户授权的UCAN签名]生成的UCAN签名。\n\n此处的REPO则是[1.2、在Github上创建一个初始化的公开仓库]创建的Github仓库名称。\n\n此处的TOKEN则是[1.3、创建一个用于上传UCAN签名到仓库的Token]生成的Token。\n\n```\n  curl -L \\\\\n  -X POST \\\\\n  -H \"Accept: application/vnd.Github+json\" \\\\\n  -H \"Authorization: Bearer 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\" \\\\\n  -H \"X-Github-Api-Version: 2022-11-28\" \\\\\n  https://api.Github.com/repos/Hzexiang/UCAN/git/blobs \\\\\n  -d '{\"content\":\"eyJhbGciOiJlY2RzYSIsInR5cGUiOiJKV1QiLCJ2ZXJzaW9uIjoiMC4wLjEifQ.eyJpc3MiOiIweDI1N2MwNzIzMDZkODQ4QTZmZDJmNjYyQWVhZDY4NTVBNzczOGRGRUYiLCJhdWQiOiJ0ZXN0IiwicHJmIjoiIiwiYWN0IjoiYWRkIn0.MHhmZWE5YTE5NjdjYzQ1ZDJjMmIxNTcyZDAyMzI0OGM1YWY1N2ZiNTE3ZDMxMGY3MmRhNWNiZTEyY2MxY2VjY2FjMGE1NzMwMmRmODk0ZjU1NTE2MWU4MDk3Nzc4YmFkN2M5ZDg4NzFjNmY5ODI1NmRhM2FjY2IxMGRlMzczNWY4NDFj\",\"encoding\":\"utf-8\"}'\n```\n\n#### 3. 请求返回。\n\n```\n{\n  \"sha\": \"30662d9adc5588d55739c30299ca180e85126f54\",\n  \"url\": \"https://api.Github.com/repos/<OWNER>/<REPO>/git/blobs/<FILE_SHA>\"\n}\n```\n\n### 1.5 将返回的URL填入网站并执行下一步，然后等待节点获取数据\n\n#### 把返回的URL填入网站中，点击Authorize授权。\n\n<p>\n    <img src=\"/images/img_11.png\" />\n</p>\n",
        "github_deauthorize_doc": "\n# I. 开发者取消授权\n\n## 1. 创建Eth账户对Github账户取消授权的UCAN签名\n\n### 1.1 打开网站：https://vote.storswift.io。\n\n### 1.2 点击UCAN Delegates 进行授权.\n\n<p>\n    <img src=\"/images/img_1.png\" />\n</p>\n\n### 1.3 拥有Developer授权以后进入授权页面会显示当前授权的Github 用户名，不用填写参数，直接点击Sign，得到取消授权的UCAN签名。 \n\n<p>\n    <img src=\"/images/img_12.png\" />\n</p>\n\n<p>\n    <img src=\"/images/img_13.png\" />\n</p>\n\n## 2. 上传Eth对Github取消授权的UCAN签名到Github仓库 \n\n### 2.1 在Github上创建一个新的的公开仓库，如果没有仓库，请参考1.2 [在 Github 上创建初始化的公共仓库] .\n\n### 2.2 创建一个用于上传UCAN签名到仓库的Token，如果没有Token参考1.3 [创建一个用于上传UCAN签名到仓库的Token] \n\n### 2.3 上传Eth对Github取消授权的UCAN签名到Github仓库  , UCAN签名为[2.1、创建Eth账户对Github账户取消授权的UCAN签名] 创建的签名 1.4 [上传Eth对Github授权的UCAN签名到Github仓库]。\n\n\n\n## 3. 将返回的URL填入网站并执行下一步，然后等待节点获取数据\n\n###将返回的URL填入网页中URL栏中，点击Deauthorize\n\n<p>\n    <img src=\"/images/img_14.png\" />\n</p>\n\n## 4. 删除存放UCAN签名对应的Github仓库\n\n### 4.1  避免取消授权以后，Eth账户还能通过URL获取到仓库中授权的UCAN签名，再次进行授权，所以取消授权以后需要，删除存放UCAN签名和取消授权UCAN签名对应的仓库。 \n\n### 4.2  进入存放UCAN签名的仓库, 选择Settings。\n\n<p>\n    <img src=\"/images/img_15.png\" />\n</p>\n\n### 4.3 在页面的最下面选择Delete this repository。\n\n<p>\n    <img src=\"/images/img_16.png\" />\n</p>\n",
        "proofDes": "完整的UCAN 内容（其中包括标题，有效负载和签名）通过您的Filecoin私钥签名"
    }
}