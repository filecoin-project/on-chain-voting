{
        "content": {
                "powerVoting": "Power Voting",
                "tools": "工具",
                "pleaseWait": "请等待",
                "noData": "无数据",
                "created": "创建于",
                "createdAt": "创建于",
                "createProposal": "创建提案",
                "endTime": "结束时间",
                "startTime": "开始时间",
                "all": "全部",
                "pending": "待办",
                "progressing": "进行中",
                "voteCounting": "计票",
                "complete": "完成",
                "operationCanceled": "操作取消",
                "storingChain": "数据上链中！",
                "storedSuccessfully": "数据上链成功！",
                "saveFail": "保存失败",
                "saveSuccess": "保存成功",
                "revokeYourself": "您不能自行撤销!",
                "alreadyRevoked": "您已撤销！",
                "alreadyApproved": "您已批准!",
                "noPropose": "不能向自己提案!",
                "activeProposal": "此地址已有一个活跃提案!",
                "twoFIPRevoke": "必须有两名以上的FIP编辑者方可撤销!",
                "selectAddress": "请选择一个地址！",
                "inputAddress": "请输入地址!",
                "fipCreateProposals": "请选择一个FIP编辑者来创建提案！",
                "iDDuplicated": "您的Miner ID重复！",
                "checkID": "请检查您的Miner ID！",
                "expirationTime": "截止时间不得早于当前时间！",
                "startTimeLoss": "开始时间必须晚于当前时间！",
                "endTimeLoss": "开始时间必须早于截止时间！",
                "blockHeightLoss": "获取power区块高度获取失败！",
                "gettingPower": "正在获取地址的权重，请等待!",
                "chooseVote": "请选择一个选项进行投票！",
                "voteSuccessful": "投票成功",
                "dataStoredFailed": "数据上链失败！",
                "saveDataFail": "保存数据失败",
                "addressEditor": "此地址已经是一个 FIP 编辑者!",
                "storing": "存储中",
                "wrongNetwork": "网络错误",
                "passed": "通过",
                "rejected": "已驳回",
                "proposalTitle": "提案名称",
                "proposalTitleRequired": "提案名称为必填项",
                "proposalTitleLengthValid": "提案名称长度不能超过100",
                "description": "描述",
                "proposalDescriptionLengthValid": "提案描述长度不能超过10000",
                "describeFIPObjectives": "请描述 FIP 目标、实施细节、风险，并附上 GitHub 链接以确保透明公开。查看模板",
                "markdownFormattingInField": "您可以在文本输入区域中使用 Markdown 格式",
                "here": "此处",
                "proposalDescriptionRequired": "提案描述为必填项",
                "proposalTimeRequired": "提案时间为必填项",
                "votingTime": "投票时间",
                "timezone": "时区",
                "proposalTimeZoneRequired": "提案截止时间为必填项",
                "back": "返回",
                "cancel": "取消",
                "saveDraft": "保存草稿",
                "codePractices": "行为准则和最佳实践",
                "proposalsClear": "提案应清晰、简洁，并着重关注具体的改进或变更。FIP 必须遵守 Filecoin 社区指南“",
                "castVote": "投票",
                "details": "详情",
                "createdby": "创建人",
                "blockHeight": "区块高度",
                "snapshotBlockHeight": "快照区块高度",
                "UCANDelegates": "UCAN委托",
                "GithubDelegates": "GitHub委托",
                "minerIDsManagement": "Miner ID管理",
                "propose": "提议",
                "approve": "批准",
                "revoke": "撤销",
                "results": "结果",
                "fipEditorApprove": "FIP编辑者批准",
                "votes": "选票",
                "proofRequired": "证明为必填项",
                "audRequired": "Aud为必填项",
                "uRLRequired": "URL为必填项",
                "gistIdRequired": "GistId为必填项",
                "previous": "上一步",
                "info": "信息",
                "FIPEditorRevoke": "FIP编辑者撤销",
                "action": "操作",
                "revokeRatio": "撤销率",
                "fipEditorAddress": "FIP编辑者地址",
                "status": "状态",
                "FIPEditor": "FIP编辑者",
                "revokeFIPEditor": "撤销FIP编辑者",
                "isConfirmRevoke": "确认撤销？",
                "yes": "是",
                "no": "否",
                "showMore": "更多",
                "showLess": "收起",
                "approveRatio": "赞成率",
                "address": "地址",
                "approveFIPEditor": "批准FIP编辑者",
                "isConfirmApprove": "确认批准？",
                "fipEditorPropose": "FIP编辑者提议",
                "savedDescriptionCharacters": "请确保描述在 2048 个字符以内",
                "createProposals": "创建提案",
                "inputEditorAddress": "请输入编辑者地址",
                "inputProposeInfo": "请输入提议信息",
                "inputMinerIDmultiplEseparate": "请输入Miner ID（如有多个 Miner ID，使用逗号隔开）",
                "proposeInfo": "提案信息",
                "proposeType": "提案类型",
                "editorAddress": "编辑者地址",
                "question": "问题",
                "approved": "已批准",
                "revoked": "已撤销",
                "role": "角色",
                "power": "算力",
                "totalPower": "总算力",
                "powerPercent": "算力百分比",
                "rolePercent": "角色百分比",
                "vote": "投票",
                "issuer": "发布人",
                "audience": "受众",
                "filecoinAddress": "请输入您的Filecoin地址",
                "proof": "证明",
                "yourGithubAccount": "请输入您的Github账号",
                "signature": "签名",
                "ucanDelegatesAuthorize": "UCAN委托 (授权)",
                "githubDelegatesAuthorize": "GitHub委托 (授权)",
                "authorize": "授权",
                "sign": "签名",
                "ucanDelegatesDeauthorize": "UCAN委托 (取消授权)",
                "githubDelegatesDeauthorize": "GitHub委托 (取消授权)",
                "deauthorize": "取消授权",
                "submit": "提交",
                "totalPercent": "总百分比",
                "documentation": "文档",
                "resources": "资源库",
                "poweredBy": "联合出品",
                "allRightReserved": "版权所有 © 2024",
                "partners": "合作伙伴",
                "contactSupport": "联系&支持",
                "legal": "法律责任",
                "privacyTerms": "隐私条款",
                "codeConduct": "行为准则",
                "discord": "Discord",
                "slack": "Slack",
                "FAQs": "问答",
                "reject": "驳回",
                "connectWallet": "连接钱包",
                "fipEditorManagement": "FIP编辑管理",
                "searchProposals": "搜索提案",
                "rejectedSignature": "签名被拒绝！",
                "headTitle": "Unlock the Power of Decentralized Decision-Making",
                "headContent": "Power Voting empowers you to participate in governance and make impactful decisions within the Filecoin ecosystem.",
                "headButtonLeft": "Learn More",
                "headButtonRight": "Get Started",
                "topTitle": "Lorem ipsum dolor sit amet",
                "topHead": "Ut enim ad minim veniam quis nostrud",
                "topContent": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut.",
                "section1Title": "Lorem ipsum dolor sit amet1",
                "section1Content": "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut.",
                "section2Title": "Lorem ipsum dolor sit amet2",
                "section2Content": "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut.",
                "section3Title": "Lorem ipsum dolor sit amet3",
                "section3Content": "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut.",
                "questionTitle": "Lorem ipsum dolor sit amet",
                "question1": "What is PowerVote?",
                "answer1": "PowerVote is an on-chain voting tool developed for the Filecoin community to enable secure, transparent, and inclusive decision-making. It facilitates voting on Filecoin Improvement Proposals (FIPs) and other critical governance issues, reflecting the diverse contributions of community members.",
                "question2": "Who can participate in voting?",
                "answer2": "All members of the Filecoin community are encouraged to participate. Eligibility is determined by proportional voting criteria, and participants can vote in multiple categories if they meet the requirements.",
                "question3": "How is voting power determined?",
                "answer3_1": "Voting power is calculated using a proportional schema across four major community categories:",
                "answer3_2": "Weighted by Raw Byte Power (RBP)",
                "answer3_3": "Weighted by Deal Bytes.",
                "answer3_4": "Weighted by FIL holdings.",
                "answer3_5": "Weighted by GitHub contributions, including merged commits in core repositories.",
                "answer3_6": "Snapshots of these metrics are taken within a specific period (60 days) before the vote.",
                "question4": "How does proportional voting work?",
                "answer4_1": "Votes are normalized within each category, and approval percentages are calculated across:",
                "answer4_2": "● Storage Providers",
                "answer4_3": "● Network Clients",
                "answer4_4": "● Tokenholders",
                "answer4_5": "● Developers",
                "answer4_6": "The final approval percentage is determined by averaging the approval percentages across all categories.",
                "question5": "Can participants vote in multiple categories?",
                "answer5": "Yes. Individuals active in multiple roles in the ecosystem can cast votes in each category they qualify for. For example, a storage provider who is also a developer can vote in both categories.",
                "question6": "How does GitHub integration work for developers?",
                "answer6": "Developers securely link their GitHub accounts to Filecoin wallets. Contributions to core repositories, such as merged commits, determine voting weights. This ensures that active contributors to the ecosystem are fairly represented.",
                "question7": "How are votes secured and confidential?",
                "answer7": "Votes are encrypted using timelock encryption, ensuring that they remain confidential until the voting period ends. After the deadline, all votes and results are fully auditable.",
                "question8": "Who can create voting proposals?",
                "answer8": "Only designated FIP Editors can create proposals. FIP Editors are selected or removed through unanimous consensus among current editors. Editors configure the voting parameters, including categories, weighting, and snapshots.",
                "question9": "How does PowerVote ensure fairness and inclusivity?",
                "answer9": "PowerVote employs proportional representation to prevent governance capture by any single faction. It limits the influence of large tokenholders (\"whales\") or institutions by equalizing representation across stakeholder groups. Future updates may adjust proportional weights as the ecosystem evolves.",
                "question10": "What are the technical requirements of the voting system?",
                "answer10_1": "The system features:",
                "answer10_2": "Daily snapshots of on-chain and off-chain data for accurate vote calculations.",
                "answer10_3": "Support for Actor IDs, ensuring votes are aggregated at the account level rather than individual addresses.",
                "answer10_4": "Smart contract configurations to calculate and normalize votes.",
                "answer10_5": "Auditable logs of past votes and outcomes.",
                "question11": "Where can I access PowerVote?",
                "answer11": "PowerVote is available at vote.fil.org. The tool is actively evolving to meet community needs, and feedback is encouraged via the",
                "question12": "Is PowerVote open-source?",
                "answer12": "Yes. PowerVote is fully open-sourced to ensure transparency, reproducibility, and community-driven improvements.",
                "bottomTitle": "Ut enim ad minim veniam quis nostrud",
                "bottomHead": "Power Voting empowers you to participate in governance and make impactful decisions within the Filecoin ecosystem.\n        ",
                "bottomButton": "Get Started",
                "filecion_authorize_doc": "\n# I. How to use UCAN signature\n\n1. First, please install Go Toolchain, you can find instructions here (https://go.dev/doc/install),Go version >=1.20. \n\n2. Get the code of UCAN signature tool.\n\n ```\ngit clone https://gitlab.com/storswiftlabs/wh/dapp/power-voting/ucan-utils\n``` \n\n3. Go into the utils directory and install the dependencies.\n\n```\ngo mod tidy\n```\n\n4. Build the binary file.\n\n```\ngo build -o signature\n```\n\n5. run.\n\n```\n./signature --aud 0x257c072306d848A6fd2f662Aead6855A7738dFEF --act add --privateKey <your_private_key> --keyType secp256k1\n```\n\n6. Return a UCAN signature.\n\n```\neyJhbGciOiJzZWNwMjU2azEiLCJ0eXBlIjoiSldUIiwidmVyc2lvbiI6IjAuMC4xIn0.eyJpc3MiOiJ0MXkyNHY2Y3BiNzNwbnVkM2tlcHFoN3Zsb2h1YmNqYTR6emtrZ2MyeSIsImF1ZCI6IjB4MjU3YzA3MjMwNmQ4NDhBNmZkMmY2NjJBZWFkNjg1NUE3NzM4ZEZFRiIsImFjdCI6ImFkZCIsInByZiI6IiJ9.qYl0CQhK_EnqoKMf7Ph6x1gx1LW875y-nL__iH89s6MocYgfEZoETWAuPwwIU21LA4f-2LntzgcxdQv0Eks7bwA\n```\n\n\n# II. Authorization for F1、F2 Owner、F3 addresses\n\n## 1. Add authorization\n\n### 1.1 Create a UCAN signature authorized by Filecoin account to Eth account\n\n[Follow the process below to create a UCAN signature with act as add.](#i-how-to-use-ucan-signature)\n\n<span style=\"color:red;\">Attention: Field **act** should be set to **add**</span>\n\nThe parameters need to be changed as follows:\n\n```\nvar (\n\\taud = \"0x257c072306d848A6fd2f662Aead6855A7738dFEF\"  //Actual Eth address that requires authorization.\n\\tact = \"add\"  //For \"act\", input \"add\"\n\\tprivateKeyStr = \"<your_private_key>\"  //Input private key against Filecoin address. \n\\tkeyTypeStr = \"secp256k1\"  //The encryption algorithm of Filecoin addresses is as follows: addresses starting with f1 use secp256k1, addresses starting with f3 use bls\n)\n```\n\n### 1.2 Create a UCAN signature authorized by Eth account to Filecoin account\n\n1. Go to https://vote.storswift.io.\n\n2. Click UCAN Delegates to  authorize.\n\n<p>\n    <img src=\"/images/img_1.png\" />\n</p>\n\n3. Select **Filecoin** for UCAN Type. \n\n4. Enter  **Filecoin address** that requires authorization against field Aud. The Filecoin address is the one that its private key is entered in [1.1 Create a UCAN signature authorized by Filecoin account to Eth account](#11-create-a-ucan-signature-authorized-by-filecoin-account-to-eth-account)\n\n5. Enter **UCAN signature** created in 1.1 Create a UCAN signature authorized by Filecoin account to Eth account against filed Proof.\n\n<p>\n    <img src=\"/images/img.png\" />\n</p>\n\n### 1.3 Authorization\n\nAfter filling in the parameters, click **Authorize** to sign the message and send it on chain, then authorized successfully.\n",
                "filecion_deauthorize_doc": "\n# I. How to use UCAN signature\n\n1. First, please install Go Toolchain, you can find instructions here (https://go.dev/doc/install),Go version >=1.20. \n\n2. Get the code of UCAN signature tool.\n\n\\ ```\ngit clone https://gitlab.com/storswiftlabs/wh/dapp/power-voting/ucan-utils\n```\n\n3. Go into the utils directory and install the dependencies.\n\n```\ngo mod tidy\n```\n\n4. Build the binary file.\n\n```\ngo build -o signature\n```\n\n5. run.\n\n```\n./signature --aud 0x257c072306d848A6fd2f662Aead6855A7738dFEF --act add --privateKey <your_private_key> --keyType secp256k1\n```\n\n6. Return a UCAN signature.\n\n```\neyJhbGciOiJzZWNwMjU2azEiLCJ0eXBlIjoiSldUIiwidmVyc2lvbiI6IjAuMC4xIn0.eyJpc3MiOiJ0MXkyNHY2Y3BiNzNwbnVkM2tlcHFoN3Zsb2h1YmNqYTR6emtrZ2MyeSIsImF1ZCI6IjB4MjU3YzA3MjMwNmQ4NDhBNmZkMmY2NjJBZWFkNjg1NUE3NzM4ZEZFRiIsImFjdCI6ImFkZCIsInByZiI6IiJ9.qYl0CQhK_EnqoKMf7Ph6x1gx1LW875y-nL__iH89s6MocYgfEZoETWAuPwwIU21LA4f-2LntzgcxdQv0Eks7bwA\n```\n\n# II. Cancel authorization\n\n## 1. Create a UCAN signature deauthorized by Filecoin account to Eth account\n\n<span style=\"color:red;\">Attention：field act  should be set to del.</span>\n\n[Follow the process below to create a UCAN signature with act as del.](#i-how-to-use-ucan-signature)\n\nThe parameters need to be changed as follows:\n\n```\nvar (\n\\taud = \"0x257c072306d848A6fd2f662Aead6855A7738dFEF\"  //Eth address that requires authorization\n\\tact = \"del\"  // Input \"del\" for field \"act\"\n\\tprivateKeyStr = \"<your_private_key>\"  // Input the private key against Filecoin address\n\\tkeyTypeStr = \"secp256k1\"  // The encryption algorithm of Filecoin addresses is as follows: addresses starting with f1 use secp256k1, addresses starting with f3 use bls\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n)\n```\n\n## 2. Create a UCAN signature deauthorized by Eth account to Filecoin account\n\n**Prerequisite: Eth account has UCAN authorization already**。\n\n2.1 Go to https://vote.storswift.io.\n\n2.2 Click UCAN Delegates to cancel authorization. The website will monitor whether the Eth account has UCAN authorization or not. The action  will cancel the authorization if it does.\n\n<p>\n    <img src=\"/images/img_1.png\" />\n</p>\n\n## 3. Iss & Aud are auto filled, you only need to enter UCAN created in 1.1 Create a UCAN signature deauthorized by Filecoin account to Eth account against field Proof.\n\n<p>\n    <img src=\"/images/img_2.png\" />\n</p>\n",
                "github_authorize_doc": "\n# I. Authorization for developers\n\n## 1. Add Authorization\n\n### 1.1 Create a UCAN signature authorized by Eth account to Github handle\n\n#### 1. Go to https://vote.storswift.io.\n\n#### 2. Click UCAN Delegates to authorize.\n\n<p>\n    <img src=\"/images/img_2.png\" />\n</p>\n\n#### 3. Select **Github** for UCAN type\n\n#### 4. Enter **Github handle** that requires authorization in field Aud.\n\n<p>\n    <img src=\"/images/img_4.png\" />\n</p>\n\n#### 5. Click Sign to generate. Signature is the UCAN authorized by Eth to Github. In subsequent operations, the Signature needs to be sent to the Github repo.\n\n<p>\n    <img src=\"/images/img_5.png\" />\n</p>\n\n### 1.2 Create an initialized public repository on Github\n\n#### Select **Public** and **Add a README file**. The repository name can be customized. There are no special requirements for that. Here UCAN is used for repo name as demonstration.\n\n<p>\n    <img src=\"/images/img_3.png\" />\n</p>\n\n### 1.3 Create a Token used to upload UCAN signature to the repository\n\n#### 1. Select **Developer settings** in  [Github Settings ](https://github.com/settings/profile)\n\n\n<p>\n    <img src=\"/images/img_7.png\" />\n</p>\n\n#### 2. Follow 4 steps below to create Token.\n\n<p>\n    <img src=\"/images/img_8.png\" />\n</p>\n\n#### 3. Select **write:packages**, the token name can be customized and there are no special requirements. The demonstration here uses **ucan** as the token name.\n\n<p>\n    <img src=\"/images/img_9.png\" />\n</p>\n\n#### 4. Remember to save the Token and you will not be able to view the Token after leaving the page.\n\n<p>\n    <img src=\"/images/img_6.png\" />\n</p>\n\n### 1.4 Upload the UCAN signature to Github repository (authorized by ETH address to Github handle) \n\n#### 1. Command\n\n```\n  curl -L \\\\\n  -X POST \\\\\n  -H \"Accept: application/vnd.Github+json\" \\\\\n  -H \"Authorization: Bearer <TOKEN>\" \\\\\n  -H \"X-Github-Api-Version: 2022-11-28\" \\\\\n  https://api.Github.com/repos/<OWNER>/<REPO>/git/blobs \\\\\n  -d '{\"content\":\"<CONTENT>\",\"encoding\":\"utf-8\"}'\n  \n```\n\n#### 2. Example：\n\nThe OWNER here 1.1 Create a UCAN signature authorized by Eth account to Github account is the Github handle entered in field Aud.\n\nThe UCAN signature here is the one generated from 1.1 Create a UCAN signature authorized by Eth account to Github account.\n\nThe REPO here is repo name created from 1.2 Create an initialized public repository on Github.\n\nThe TOKEN here is one generated from 1.3 Create a Token used to upload the UCAN signature to the repository.\n\n```\n  curl -L \\\\\n  -X POST \\\\\n  -H \"Accept: application/vnd.Github+json\" \\\\\n  -H \"Authorization: Bearer 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\" \\\\\n  -H \"X-Github-Api-Version: 2022-11-28\" \\\\\n  https://api.Github.com/repos/Hzexiang/UCAN/git/blobs \\\\\n  -d '{\"content\":\"eyJhbGciOiJlY2RzYSIsInR5cGUiOiJKV1QiLCJ2ZXJzaW9uIjoiMC4wLjEifQ.eyJpc3MiOiIweDI1N2MwNzIzMDZkODQ4QTZmZDJmNjYyQWVhZDY4NTVBNzczOGRGRUYiLCJhdWQiOiJ0ZXN0IiwicHJmIjoiIiwiYWN0IjoiYWRkIn0.MHhmZWE5YTE5NjdjYzQ1ZDJjMmIxNTcyZDAyMzI0OGM1YWY1N2ZiNTE3ZDMxMGY3MmRhNWNiZTEyY2MxY2VjY2FjMGE1NzMwMmRmODk0ZjU1NTE2MWU4MDk3Nzc4YmFkN2M5ZDg4NzFjNmY5ODI1NmRhM2FjY2IxMGRlMzczNWY4NDFj\",\"encoding\":\"utf-8\"}'\n```\n\n#### 3. Request returns the results.\n\n```\n{\n  \"sha\": \"30662d9adc5588d55739c30299ca180e85126f54\",\n  \"url\": \"https://api.Github.com/repos/<OWNER>/<REPO>/git/blobs/<FILE_SHA>\"\n}\n```\n\n### 1.5 Enter the returned URL on website and proceed to the next step, then wait for the node to get the data\n\n#### Enter the **returned URL**  as required and then click **Authorize**.\n\n<p>\n    <img src=\"/images/img_11.png\" />\n</p>\n",
                "github_deauthorize_doc": "\n# I. Deauthorization for developers\n\n## 1. Create a UCAN signature deauthorized by Eth account to Github handle\n\n### 1.1 Go to https://vote.storswift.io.\n\n### 1.2 Click UCAN Delegates to  authorize.\n\n<p>\n    <img src=\"/images/img_1.png\" />\n</p>\n\n### 1.3 After authorized successfully for Developers, the authorized Github handle will be displayed when entering authorization page. No need to enter parameters, click on **Sign** and you will get UCAN signature for cancelling authorization. \n\n<p>\n    <img src=\"/images/img_12.png\" />\n</p>\n\n<p>\n    <img src=\"/images/img_13.png\" />\n</p>\n\n## 2. Upload the UCAN signature to Github repository (deauthorized by ETH address to Github handle) \n\n### 2.1 Create a new public repository on Github, refer to 1.2 Create an initialized public repository on Github if necessary.\n\n### 2.2 Create a Token used to upload the UCAN signature to repository, refer to 1.3 Create a Token used to upload the UCAN signature to the repository if necessary\n\n### 2.3 Upload  the UCAN signature to Github repository (deauthorized by ETH account to Github)  , UCAN signature is generated from 2.1 Create a UCAN signature deauthorized by Eth account to Github account 1.4 Upload the UCAN signature to Github repository (authorized by ETH address to Github handle).\n\n\n\n## 3. Enter the returned URL on website and proceed to the next step, then wait for the node to get the data\n\n### Enter the returned URL like below and click **Deauthorize**\n\n<p>\n    <img src=\"/images/img_14.png\" />\n</p>\n\n## 4. Delete the Github repository that saves UCAN signature\n\n### 4.1  After deauthorization, the Eth account can still obtain the authorized UCAN signature in the repo through the URL and authorize it again. To avoid the case mentioned before,  there is need to  delete the repository that saves authorized&deauthorized UCAN signature. \n\n### 4.2  Find the **settings** for repository that saves UCAN signature.\n\n<p>\n    <img src=\"/images/img_15.png\" />\n</p>\n\n### 4.3 Select **Delete this repository** at the bottom of the page.\n\n<p>\n    <img src=\"/images/img_16.png\" />\n</p>\n",
                "proofDes": "The full UCAN content (include header, payload and signature) signed by your Filecoin private key.",
                "fipEditorList": "FIP编辑列表",
                "powerPercentage": "算力百分比",
                "infoPercentage": "角色权重占比总和必须等于100",
                "percentageRequired": "占比是必填的",
                "inputFipInfo": "请输入提案信息!",
                "inputValidAddress": "请输入有效的地址!",
                "createPropose": "Create Propose",
                "approveList": "批准列表",
                "revokeList": "撤销列表",
                "calculationFormula": "计算公式",
                "time": "时间",
                "authorizeAgain": "再次授权",
                "getGistID": "请先粘贴以上文字，获取gistId。",
                "validGistIdInfo": "无效的GistId!",
                "voted": "已投票",
                "githubName": "GitHub名称",
                "gitHubDelegatesList": "GitHub委托列表",
                "copiedSuccessfully": "复制成功",
                "copyFailed": "复制失败",
                "copy": "复制",
                "saveProposalTitleInfo": "请确保提案标题在100个字符以内",
                "minerIdList": "Miner ID列表",
                "next": "下一步"
        }
}