// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: repo/contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIContractRepo is a mock of IContractRepo interface.
type MockIContractRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIContractRepoMockRecorder
}

// MockIContractRepoMockRecorder is the mock recorder for MockIContractRepo.
type MockIContractRepoMockRecorder struct {
	mock *MockIContractRepo
}

// NewMockIContractRepo creates a new mock instance.
func NewMockIContractRepo(ctrl *gomock.Controller) *MockIContractRepo {
	mock := &MockIContractRepo{ctrl: ctrl}
	mock.recorder = &MockIContractRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContractRepo) EXPECT() *MockIContractRepoMockRecorder {
	return m.recorder
}

// GetActorIdByAddress mocks base method.
func (m *MockIContractRepo) GetActorIdByAddress(address string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorIdByAddress", address)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorIdByAddress indicates an expected call of GetActorIdByAddress.
func (mr *MockIContractRepoMockRecorder) GetActorIdByAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorIdByAddress", reflect.TypeOf((*MockIContractRepo)(nil).GetActorIdByAddress), address)
}

// GetBlockTime mocks base method.
func (m *MockIContractRepo) GetBlockTime(syncedHeight int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTime", syncedHeight)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTime indicates an expected call of GetBlockTime.
func (mr *MockIContractRepoMockRecorder) GetBlockTime(syncedHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTime", reflect.TypeOf((*MockIContractRepo)(nil).GetBlockTime), syncedHeight)
}

// GetOwnerIdByOracle mocks base method.
func (m *MockIContractRepo) GetOwnerIdByOracle(actorID uint64, minerId []uint64) []uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerIdByOracle", actorID, minerId)
	ret0, _ := ret[0].([]uint64)
	return ret0
}

// GetOwnerIdByOracle indicates an expected call of GetOwnerIdByOracle.
func (mr *MockIContractRepoMockRecorder) GetOwnerIdByOracle(actorID, minerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerIdByOracle", reflect.TypeOf((*MockIContractRepo)(nil).GetOwnerIdByOracle), actorID, minerId)
}

// GetVotedAlgorithm mocks base method.
func (m *MockIContractRepo) GetVotedAlgorithm() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotedAlgorithm")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotedAlgorithm indicates an expected call of GetVotedAlgorithm.
func (mr *MockIContractRepoMockRecorder) GetVotedAlgorithm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotedAlgorithm", reflect.TypeOf((*MockIContractRepo)(nil).GetVotedAlgorithm))
}
