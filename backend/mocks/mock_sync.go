// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: service/sync.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "powervoting-server/model"
)

// MockSyncRepo is a mock of SyncRepo interface.
type MockSyncRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSyncRepoMockRecorder
}

// MockSyncRepoMockRecorder is the mock recorder for MockSyncRepo.
type MockSyncRepoMockRecorder struct {
	mock *MockSyncRepo
}

// NewMockSyncRepo creates a new mock instance.
func NewMockSyncRepo(ctrl *gomock.Controller) *MockSyncRepo {
	mock := &MockSyncRepo{ctrl: ctrl}
	mock.recorder = &MockSyncRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncRepo) EXPECT() *MockSyncRepoMockRecorder {
	return m.recorder
}

// AddGithubRepoName mocks base method.
func (m *MockSyncRepo) AddGithubRepoName(ctx context.Context, in *model.GithubRepos) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGithubRepoName", ctx, in)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGithubRepoName indicates an expected call of AddGithubRepoName.
func (mr *MockSyncRepoMockRecorder) AddGithubRepoName(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGithubRepoName", reflect.TypeOf((*MockSyncRepo)(nil).AddGithubRepoName), ctx, in)
}

// CreateSyncEventInfo mocks base method.
func (m *MockSyncRepo) CreateSyncEventInfo(ctx context.Context, in *model.SyncEventTbl) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSyncEventInfo", ctx, in)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSyncEventInfo indicates an expected call of CreateSyncEventInfo.
func (mr *MockSyncRepoMockRecorder) CreateSyncEventInfo(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncEventInfo", reflect.TypeOf((*MockSyncRepo)(nil).CreateSyncEventInfo), ctx, in)
}

// DeleteGithubRepoName mocks base method.
func (m *MockSyncRepo) DeleteGithubRepoName(ctx context.Context, orgId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGithubRepoName", ctx, orgId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGithubRepoName indicates an expected call of DeleteGithubRepoName.
func (mr *MockSyncRepoMockRecorder) DeleteGithubRepoName(ctx, orgId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGithubRepoName", reflect.TypeOf((*MockSyncRepo)(nil).DeleteGithubRepoName), ctx, orgId)
}

// GetGithubRepoName mocks base method.
func (m *MockSyncRepo) GetGithubRepoName(ctx context.Context, orgType int) ([]model.GithubRepos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGithubRepoName", ctx, orgType)
	ret0, _ := ret[0].([]model.GithubRepos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubRepoName indicates an expected call of GetGithubRepoName.
func (mr *MockSyncRepoMockRecorder) GetGithubRepoName(ctx, orgType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubRepoName", reflect.TypeOf((*MockSyncRepo)(nil).GetGithubRepoName), ctx, orgType)
}

// GetSyncEventInfo mocks base method.
func (m *MockSyncRepo) GetSyncEventInfo(ctx context.Context, addr string) (*model.SyncEventTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncEventInfo", ctx, addr)
	ret0, _ := ret[0].(*model.SyncEventTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncEventInfo indicates an expected call of GetSyncEventInfo.
func (mr *MockSyncRepoMockRecorder) GetSyncEventInfo(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncEventInfo", reflect.TypeOf((*MockSyncRepo)(nil).GetSyncEventInfo), ctx, addr)
}

// UpdateSyncEventInfo mocks base method.
func (m *MockSyncRepo) UpdateSyncEventInfo(ctx context.Context, addr string, height int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncEventInfo", ctx, addr, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSyncEventInfo indicates an expected call of UpdateSyncEventInfo.
func (mr *MockSyncRepoMockRecorder) UpdateSyncEventInfo(ctx, addr, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncEventInfo", reflect.TypeOf((*MockSyncRepo)(nil).UpdateSyncEventInfo), ctx, addr, height)
}

// MockLotusRepo is a mock of LotusRepo interface.
type MockLotusRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLotusRepoMockRecorder
}

// MockLotusRepoMockRecorder is the mock recorder for MockLotusRepo.
type MockLotusRepoMockRecorder struct {
	mock *MockLotusRepo
}

// NewMockLotusRepo creates a new mock instance.
func NewMockLotusRepo(ctrl *gomock.Controller) *MockLotusRepo {
	mock := &MockLotusRepo{ctrl: ctrl}
	mock.recorder = &MockLotusRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLotusRepo) EXPECT() *MockLotusRepoMockRecorder {
	return m.recorder
}

// EthAddrToFilcoinAddr mocks base method.
func (m *MockLotusRepo) EthAddrToFilcoinAddr(ctx context.Context, addr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthAddrToFilcoinAddr", ctx, addr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthAddrToFilcoinAddr indicates an expected call of EthAddrToFilcoinAddr.
func (mr *MockLotusRepoMockRecorder) EthAddrToFilcoinAddr(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthAddrToFilcoinAddr", reflect.TypeOf((*MockLotusRepo)(nil).EthAddrToFilcoinAddr), ctx, addr)
}

// FilecoinAddrToEthAddr mocks base method.
func (m *MockLotusRepo) FilecoinAddrToEthAddr(ctx context.Context, addr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilecoinAddrToEthAddr", ctx, addr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilecoinAddrToEthAddr indicates an expected call of FilecoinAddrToEthAddr.
func (mr *MockLotusRepoMockRecorder) FilecoinAddrToEthAddr(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilecoinAddrToEthAddr", reflect.TypeOf((*MockLotusRepo)(nil).FilecoinAddrToEthAddr), ctx, addr)
}

// FilecoinAddressToID mocks base method.
func (m *MockLotusRepo) FilecoinAddressToID(ctx context.Context, addr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilecoinAddressToID", ctx, addr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilecoinAddressToID indicates an expected call of FilecoinAddressToID.
func (mr *MockLotusRepoMockRecorder) FilecoinAddressToID(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilecoinAddressToID", reflect.TypeOf((*MockLotusRepo)(nil).FilecoinAddressToID), ctx, addr)
}

// GetActorIdByAddress mocks base method.
func (m *MockLotusRepo) GetActorIdByAddress(ctx context.Context, addr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorIdByAddress", ctx, addr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorIdByAddress indicates an expected call of GetActorIdByAddress.
func (mr *MockLotusRepoMockRecorder) GetActorIdByAddress(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorIdByAddress", reflect.TypeOf((*MockLotusRepo)(nil).GetActorIdByAddress), ctx, addr)
}

// GetValidMinerIds mocks base method.
func (m *MockLotusRepo) GetValidMinerIds(ctx context.Context, minerId string, minerIds []uint64) (model.StringSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidMinerIds", ctx, minerId, minerIds)
	ret0, _ := ret[0].(model.StringSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidMinerIds indicates an expected call of GetValidMinerIds.
func (mr *MockLotusRepoMockRecorder) GetValidMinerIds(ctx, minerId, minerIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidMinerIds", reflect.TypeOf((*MockLotusRepo)(nil).GetValidMinerIds), ctx, minerId, minerIds)
}

// MockISyncService is a mock of ISyncService interface.
type MockISyncService struct {
	ctrl     *gomock.Controller
	recorder *MockISyncServiceMockRecorder
}

// MockISyncServiceMockRecorder is the mock recorder for MockISyncService.
type MockISyncServiceMockRecorder struct {
	mock *MockISyncService
}

// NewMockISyncService creates a new mock instance.
func NewMockISyncService(ctrl *gomock.Controller) *MockISyncService {
	mock := &MockISyncService{ctrl: ctrl}
	mock.recorder = &MockISyncServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISyncService) EXPECT() *MockISyncServiceMockRecorder {
	return m.recorder
}

// AddGithubRepoName mocks base method.
func (m *MockISyncService) AddGithubRepoName(ctx context.Context, orgType int, repoName string, orgId, addTimestamp int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGithubRepoName", ctx, orgType, repoName, orgId, addTimestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGithubRepoName indicates an expected call of AddGithubRepoName.
func (mr *MockISyncServiceMockRecorder) AddGithubRepoName(ctx, orgType, repoName, orgId, addTimestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGithubRepoName", reflect.TypeOf((*MockISyncService)(nil).AddGithubRepoName), ctx, orgType, repoName, orgId, addTimestamp)
}

// AddProposal mocks base method.
func (m *MockISyncService) AddProposal(ctx context.Context, in *model.ProposalTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProposal", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProposal indicates an expected call of AddProposal.
func (mr *MockISyncServiceMockRecorder) AddProposal(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProposal", reflect.TypeOf((*MockISyncService)(nil).AddProposal), ctx, in)
}

// AddVote mocks base method.
func (m *MockISyncService) AddVote(ctx context.Context, in *model.VoteTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVote", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVote indicates an expected call of AddVote.
func (mr *MockISyncServiceMockRecorder) AddVote(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVote", reflect.TypeOf((*MockISyncService)(nil).AddVote), ctx, in)
}

// AddVoterAddress mocks base method.
func (m *MockISyncService) AddVoterAddress(ctx context.Context, in *model.VoterInfoTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVoterAddress", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVoterAddress indicates an expected call of AddVoterAddress.
func (mr *MockISyncServiceMockRecorder) AddVoterAddress(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVoterAddress", reflect.TypeOf((*MockISyncService)(nil).AddVoterAddress), ctx, in)
}

// BatchUpdateVotes mocks base method.
func (m *MockISyncService) BatchUpdateVotes(ctx context.Context, votes []model.VoteTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateVotes", ctx, votes)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateVotes indicates an expected call of BatchUpdateVotes.
func (mr *MockISyncServiceMockRecorder) BatchUpdateVotes(ctx, votes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateVotes", reflect.TypeOf((*MockISyncService)(nil).BatchUpdateVotes), ctx, votes)
}

// CreateFipEditor mocks base method.
func (m *MockISyncService) CreateFipEditor(ctx context.Context, in *model.FipEditorTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFipEditor", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFipEditor indicates an expected call of CreateFipEditor.
func (mr *MockISyncServiceMockRecorder) CreateFipEditor(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFipEditor", reflect.TypeOf((*MockISyncService)(nil).CreateFipEditor), ctx, in)
}

// CreateFipProposal mocks base method.
func (m *MockISyncService) CreateFipProposal(ctx context.Context, in *model.FipProposalTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFipProposal", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFipProposal indicates an expected call of CreateFipProposal.
func (mr *MockISyncServiceMockRecorder) CreateFipProposal(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFipProposal", reflect.TypeOf((*MockISyncService)(nil).CreateFipProposal), ctx, in)
}

// CreateFipProposalVotedInfo mocks base method.
func (m *MockISyncService) CreateFipProposalVotedInfo(ctx context.Context, in *model.FipProposalVoteTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFipProposalVotedInfo", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFipProposalVotedInfo indicates an expected call of CreateFipProposalVotedInfo.
func (mr *MockISyncServiceMockRecorder) CreateFipProposalVotedInfo(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFipProposalVotedInfo", reflect.TypeOf((*MockISyncService)(nil).CreateFipProposalVotedInfo), ctx, in)
}

// CreateSyncEventInfo mocks base method.
func (m *MockISyncService) CreateSyncEventInfo(ctx context.Context, in *model.SyncEventTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSyncEventInfo", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSyncEventInfo indicates an expected call of CreateSyncEventInfo.
func (mr *MockISyncServiceMockRecorder) CreateSyncEventInfo(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncEventInfo", reflect.TypeOf((*MockISyncService)(nil).CreateSyncEventInfo), ctx, in)
}

// DeleteGithubRepoName mocks base method.
func (m *MockISyncService) DeleteGithubRepoName(ctx context.Context, orgId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGithubRepoName", ctx, orgId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGithubRepoName indicates an expected call of DeleteGithubRepoName.
func (mr *MockISyncServiceMockRecorder) DeleteGithubRepoName(ctx, orgId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGithubRepoName", reflect.TypeOf((*MockISyncService)(nil).DeleteGithubRepoName), ctx, orgId)
}

// GetSyncEventInfo mocks base method.
func (m *MockISyncService) GetSyncEventInfo(ctx context.Context, addr string) (*model.SyncEventTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncEventInfo", ctx, addr)
	ret0, _ := ret[0].(*model.SyncEventTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncEventInfo indicates an expected call of GetSyncEventInfo.
func (mr *MockISyncServiceMockRecorder) GetSyncEventInfo(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncEventInfo", reflect.TypeOf((*MockISyncService)(nil).GetSyncEventInfo), ctx, addr)
}

// GetUncountedVotedList mocks base method.
func (m *MockISyncService) GetUncountedVotedList(ctx context.Context, chainId, proposalId int64) ([]model.VoteTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncountedVotedList", ctx, chainId, proposalId)
	ret0, _ := ret[0].([]model.VoteTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncountedVotedList indicates an expected call of GetUncountedVotedList.
func (mr *MockISyncServiceMockRecorder) GetUncountedVotedList(ctx, chainId, proposalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncountedVotedList", reflect.TypeOf((*MockISyncService)(nil).GetUncountedVotedList), ctx, chainId, proposalId)
}

// RevokeFipProposal mocks base method.
func (m *MockISyncService) RevokeFipProposal(ctx context.Context, chainId int64, cadidateAddresss string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeFipProposal", ctx, chainId, cadidateAddresss)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeFipProposal indicates an expected call of RevokeFipProposal.
func (mr *MockISyncServiceMockRecorder) RevokeFipProposal(ctx, chainId, cadidateAddresss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeFipProposal", reflect.TypeOf((*MockISyncService)(nil).RevokeFipProposal), ctx, chainId, cadidateAddresss)
}

// UncountedProposalList mocks base method.
func (m *MockISyncService) UncountedProposalList(ctx context.Context, chainId, endTime int64) ([]model.ProposalTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UncountedProposalList", ctx, chainId, endTime)
	ret0, _ := ret[0].([]model.ProposalTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UncountedProposalList indicates an expected call of UncountedProposalList.
func (mr *MockISyncServiceMockRecorder) UncountedProposalList(ctx, chainId, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UncountedProposalList", reflect.TypeOf((*MockISyncService)(nil).UncountedProposalList), ctx, chainId, endTime)
}

// UpdateProposal mocks base method.
func (m *MockISyncService) UpdateProposal(ctx context.Context, in *model.ProposalTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProposal", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProposal indicates an expected call of UpdateProposal.
func (mr *MockISyncServiceMockRecorder) UpdateProposal(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProposal", reflect.TypeOf((*MockISyncService)(nil).UpdateProposal), ctx, in)
}

// UpdateStatusAndGetFipProposal mocks base method.
func (m *MockISyncService) UpdateStatusAndGetFipProposal(ctx context.Context, proposalId, chainId int64) (*model.FipProposalTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusAndGetFipProposal", ctx, proposalId, chainId)
	ret0, _ := ret[0].(*model.FipProposalTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusAndGetFipProposal indicates an expected call of UpdateStatusAndGetFipProposal.
func (mr *MockISyncServiceMockRecorder) UpdateStatusAndGetFipProposal(ctx, proposalId, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusAndGetFipProposal", reflect.TypeOf((*MockISyncService)(nil).UpdateStatusAndGetFipProposal), ctx, proposalId, chainId)
}

// UpdateSyncEventInfo mocks base method.
func (m *MockISyncService) UpdateSyncEventInfo(ctx context.Context, addr string, height int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncEventInfo", ctx, addr, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSyncEventInfo indicates an expected call of UpdateSyncEventInfo.
func (mr *MockISyncServiceMockRecorder) UpdateSyncEventInfo(ctx, addr, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncEventInfo", reflect.TypeOf((*MockISyncService)(nil).UpdateSyncEventInfo), ctx, addr, height)
}

// UpdateVoterAndProposalGithubNameByGistInfo mocks base method.
func (m *MockISyncService) UpdateVoterAndProposalGithubNameByGistInfo(ctx context.Context, voterInfo *model.VoterInfoTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoterAndProposalGithubNameByGistInfo", ctx, voterInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVoterAndProposalGithubNameByGistInfo indicates an expected call of UpdateVoterAndProposalGithubNameByGistInfo.
func (mr *MockISyncServiceMockRecorder) UpdateVoterAndProposalGithubNameByGistInfo(ctx, voterInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoterAndProposalGithubNameByGistInfo", reflect.TypeOf((*MockISyncService)(nil).UpdateVoterAndProposalGithubNameByGistInfo), ctx, voterInfo)
}

// UpdateVoterByMinerIds mocks base method.
func (m *MockISyncService) UpdateVoterByMinerIds(ctx context.Context, voterAddress string, minerIds []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoterByMinerIds", ctx, voterAddress, minerIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVoterByMinerIds indicates an expected call of UpdateVoterByMinerIds.
func (mr *MockISyncServiceMockRecorder) UpdateVoterByMinerIds(ctx, voterAddress, minerIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoterByMinerIds", reflect.TypeOf((*MockISyncService)(nil).UpdateVoterByMinerIds), ctx, voterAddress, minerIds)
}
