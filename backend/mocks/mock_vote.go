// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Code generated by MockGen. DO NOT EDIT.
// Source: service/vote.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "powervoting-server/model"
	api "powervoting-server/model/api"
)

// MockVoteRepo is a mock of VoteRepo interface.
type MockVoteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockVoteRepoMockRecorder
}

// MockVoteRepoMockRecorder is the mock recorder for MockVoteRepo.
type MockVoteRepoMockRecorder struct {
	mock *MockVoteRepo
}

// NewMockVoteRepo creates a new mock instance.
func NewMockVoteRepo(ctrl *gomock.Controller) *MockVoteRepo {
	mock := &MockVoteRepo{ctrl: ctrl}
	mock.recorder = &MockVoteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteRepo) EXPECT() *MockVoteRepoMockRecorder {
	return m.recorder
}

// BatchUpdateVotes mocks base method.
func (m *MockVoteRepo) BatchUpdateVotes(ctx context.Context, votes []model.VoteTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateVotes", ctx, votes)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateVotes indicates an expected call of BatchUpdateVotes.
func (mr *MockVoteRepoMockRecorder) BatchUpdateVotes(ctx, votes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateVotes", reflect.TypeOf((*MockVoteRepo)(nil).BatchUpdateVotes), ctx, votes)
}

// CreateVote mocks base method.
func (m *MockVoteRepo) CreateVote(ctx context.Context, in *model.VoteTbl) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVote", ctx, in)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVote indicates an expected call of CreateVote.
func (mr *MockVoteRepoMockRecorder) CreateVote(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockVoteRepo)(nil).CreateVote), ctx, in)
}

// CreateVoterAddress mocks base method.
func (m *MockVoteRepo) CreateVoterAddress(ctx context.Context, in *model.VoterInfoTbl) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoterAddress", ctx, in)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoterAddress indicates an expected call of CreateVoterAddress.
func (mr *MockVoteRepoMockRecorder) CreateVoterAddress(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoterAddress", reflect.TypeOf((*MockVoteRepo)(nil).CreateVoterAddress), ctx, in)
}

// GetAllVoterAddresss mocks base method.
func (m *MockVoteRepo) GetAllVoterAddresss(ctx context.Context, chainId int64) ([]model.VoterInfoTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVoterAddresss", ctx, chainId)
	ret0, _ := ret[0].([]model.VoterInfoTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVoterAddresss indicates an expected call of GetAllVoterAddresss.
func (mr *MockVoteRepoMockRecorder) GetAllVoterAddresss(ctx, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVoterAddresss", reflect.TypeOf((*MockVoteRepo)(nil).GetAllVoterAddresss), ctx, chainId)
}

// GetVoteList mocks base method.
func (m *MockVoteRepo) GetVoteList(ctx context.Context, chainId, proposalId int64, counted bool) ([]model.VoteTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoteList", ctx, chainId, proposalId, counted)
	ret0, _ := ret[0].([]model.VoteTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoteList indicates an expected call of GetVoteList.
func (mr *MockVoteRepoMockRecorder) GetVoteList(ctx, chainId, proposalId, counted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoteList", reflect.TypeOf((*MockVoteRepo)(nil).GetVoteList), ctx, chainId, proposalId, counted)
}

// GetVoterInfoByAddress mocks base method.
func (m *MockVoteRepo) GetVoterInfoByAddress(ctx context.Context, address string) (*model.VoterInfoTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoterInfoByAddress", ctx, address)
	ret0, _ := ret[0].(*model.VoterInfoTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoterInfoByAddress indicates an expected call of GetVoterInfoByAddress.
func (mr *MockVoteRepoMockRecorder) GetVoterInfoByAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoterInfoByAddress", reflect.TypeOf((*MockVoteRepo)(nil).GetVoterInfoByAddress), ctx, address)
}

// UpdateVoterByGistInfo mocks base method.
func (m *MockVoteRepo) UpdateVoterByGistInfo(ctx context.Context, in *model.VoterInfoTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoterByGistInfo", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVoterByGistInfo indicates an expected call of UpdateVoterByGistInfo.
func (mr *MockVoteRepoMockRecorder) UpdateVoterByGistInfo(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoterByGistInfo", reflect.TypeOf((*MockVoteRepo)(nil).UpdateVoterByGistInfo), ctx, in)
}

// UpdateVoterByMinerInfo mocks base method.
func (m *MockVoteRepo) UpdateVoterByMinerInfo(ctx context.Context, in *model.VoterInfoTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoterByMinerInfo", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVoterByMinerInfo indicates an expected call of UpdateVoterByMinerInfo.
func (mr *MockVoteRepoMockRecorder) UpdateVoterByMinerInfo(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoterByMinerInfo", reflect.TypeOf((*MockVoteRepo)(nil).UpdateVoterByMinerInfo), ctx, in)
}

// MockIVoteService is a mock of IVoteService interface.
type MockIVoteService struct {
	ctrl     *gomock.Controller
	recorder *MockIVoteServiceMockRecorder
}

// MockIVoteServiceMockRecorder is the mock recorder for MockIVoteService.
type MockIVoteServiceMockRecorder struct {
	mock *MockIVoteService
}

// NewMockIVoteService creates a new mock instance.
func NewMockIVoteService(ctrl *gomock.Controller) *MockIVoteService {
	mock := &MockIVoteService{ctrl: ctrl}
	mock.recorder = &MockIVoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVoteService) EXPECT() *MockIVoteServiceMockRecorder {
	return m.recorder
}

// GetCountedVotedList mocks base method.
func (m *MockIVoteService) GetCountedVotedList(ctx context.Context, chainId, proposalId int64) ([]api.Voted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountedVotedList", ctx, chainId, proposalId)
	ret0, _ := ret[0].([]api.Voted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountedVotedList indicates an expected call of GetCountedVotedList.
func (mr *MockIVoteServiceMockRecorder) GetCountedVotedList(ctx, chainId, proposalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountedVotedList", reflect.TypeOf((*MockIVoteService)(nil).GetCountedVotedList), ctx, chainId, proposalId)
}

// GetFipEditorGistInfo mocks base method.
func (m *MockIVoteService) GetFipEditorGistInfo(ctx context.Context, req api.AddressReq) (*api.FipEditorGistInfoRep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFipEditorGistInfo", ctx, req)
	ret0, _ := ret[0].(*api.FipEditorGistInfoRep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFipEditorGistInfo indicates an expected call of GetFipEditorGistInfo.
func (mr *MockIVoteServiceMockRecorder) GetFipEditorGistInfo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFipEditorGistInfo", reflect.TypeOf((*MockIVoteService)(nil).GetFipEditorGistInfo), ctx, req)
}

// VerifyGist mocks base method.
func (m *MockIVoteService) VerifyGist(ctx context.Context, req api.VerifyGistReq) (*model.SigObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyGist", ctx, req)
	ret0, _ := ret[0].(*model.SigObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyGist indicates an expected call of VerifyGist.
func (mr *MockIVoteServiceMockRecorder) VerifyGist(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyGist", reflect.TypeOf((*MockIVoteService)(nil).VerifyGist), ctx, req)
}
