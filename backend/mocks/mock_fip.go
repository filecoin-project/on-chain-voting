// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Code generated by MockGen. DO NOT EDIT.
// Source: service/fip.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "powervoting-server/model"
	api "powervoting-server/model/api"
)

// MockFipRepo is a mock of FipRepo interface.
type MockFipRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFipRepoMockRecorder
}

// MockFipRepoMockRecorder is the mock recorder for MockFipRepo.
type MockFipRepoMockRecorder struct {
	mock *MockFipRepo
}

// NewMockFipRepo creates a new mock instance.
func NewMockFipRepo(ctrl *gomock.Controller) *MockFipRepo {
	mock := &MockFipRepo{ctrl: ctrl}
	mock.recorder = &MockFipRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFipRepo) EXPECT() *MockFipRepoMockRecorder {
	return m.recorder
}

// CreateFipEditor mocks base method.
func (m *MockFipRepo) CreateFipEditor(ctx context.Context, in *model.FipEditorTbl) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFipEditor", ctx, in)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFipEditor indicates an expected call of CreateFipEditor.
func (mr *MockFipRepoMockRecorder) CreateFipEditor(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFipEditor", reflect.TypeOf((*MockFipRepo)(nil).CreateFipEditor), ctx, in)
}

// CreateFipProposal mocks base method.
func (m *MockFipRepo) CreateFipProposal(ctx context.Context, in *model.FipProposalTbl) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFipProposal", ctx, in)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFipProposal indicates an expected call of CreateFipProposal.
func (mr *MockFipRepoMockRecorder) CreateFipProposal(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFipProposal", reflect.TypeOf((*MockFipRepo)(nil).CreateFipProposal), ctx, in)
}

// CreateFipProposalVote mocks base method.
func (m *MockFipRepo) CreateFipProposalVote(ctx context.Context, in *model.FipProposalVoteTbl) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFipProposalVote", ctx, in)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFipProposalVote indicates an expected call of CreateFipProposalVote.
func (mr *MockFipRepoMockRecorder) CreateFipProposalVote(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFipProposalVote", reflect.TypeOf((*MockFipRepo)(nil).CreateFipProposalVote), ctx, in)
}

// GetFipEditorCount mocks base method.
func (m *MockFipRepo) GetFipEditorCount(ctx context.Context, chainId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFipEditorCount", ctx, chainId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFipEditorCount indicates an expected call of GetFipEditorCount.
func (mr *MockFipRepoMockRecorder) GetFipEditorCount(ctx, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFipEditorCount", reflect.TypeOf((*MockFipRepo)(nil).GetFipEditorCount), ctx, chainId)
}

// GetFipProposalListWithPagination mocks base method.
func (m *MockFipRepo) GetFipProposalListWithPagination(ctx context.Context, req api.FipProposalListReq) ([]model.FipProposalVoted, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFipProposalListWithPagination", ctx, req)
	ret0, _ := ret[0].([]model.FipProposalVoted)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFipProposalListWithPagination indicates an expected call of GetFipProposalListWithPagination.
func (mr *MockFipRepoMockRecorder) GetFipProposalListWithPagination(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFipProposalListWithPagination", reflect.TypeOf((*MockFipRepo)(nil).GetFipProposalListWithPagination), ctx, req)
}

// GetFipProposalVoteCount mocks base method.
func (m *MockFipRepo) GetFipProposalVoteCount(ctx context.Context, chainId, proposalId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFipProposalVoteCount", ctx, chainId, proposalId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFipProposalVoteCount indicates an expected call of GetFipProposalVoteCount.
func (mr *MockFipRepoMockRecorder) GetFipProposalVoteCount(ctx, chainId, proposalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFipProposalVoteCount", reflect.TypeOf((*MockFipRepo)(nil).GetFipProposalVoteCount), ctx, chainId, proposalId)
}

// GetUnpassFipProposalList mocks base method.
func (m *MockFipRepo) GetUnpassFipProposalList(ctx context.Context, chainId int64) ([]model.FipProposalTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnpassFipProposalList", ctx, chainId)
	ret0, _ := ret[0].([]model.FipProposalTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnpassFipProposalList indicates an expected call of GetUnpassFipProposalList.
func (mr *MockFipRepoMockRecorder) GetUnpassFipProposalList(ctx, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnpassFipProposalList", reflect.TypeOf((*MockFipRepo)(nil).GetUnpassFipProposalList), ctx, chainId)
}

// GetValidFipEditorList mocks base method.
func (m *MockFipRepo) GetValidFipEditorList(ctx context.Context, req api.FipEditorListReq) ([]model.FipEditorTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidFipEditorList", ctx, req)
	ret0, _ := ret[0].([]model.FipEditorTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidFipEditorList indicates an expected call of GetValidFipEditorList.
func (mr *MockFipRepoMockRecorder) GetValidFipEditorList(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidFipEditorList", reflect.TypeOf((*MockFipRepo)(nil).GetValidFipEditorList), ctx, req)
}

// UpdateFipEditorByAddress mocks base method.
func (m *MockFipRepo) UpdateFipEditorByAddress(ctx context.Context, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFipEditorByAddress", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFipEditorByAddress indicates an expected call of UpdateFipEditorByAddress.
func (mr *MockFipRepoMockRecorder) UpdateFipEditorByAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFipEditorByAddress", reflect.TypeOf((*MockFipRepo)(nil).UpdateFipEditorByAddress), ctx, address)
}

// UpdateFipProposalVoteByAddress mocks base method.
func (m *MockFipRepo) UpdateFipProposalVoteByAddress(ctx context.Context, proposalId int64, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFipProposalVoteByAddress", ctx, proposalId, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFipProposalVoteByAddress indicates an expected call of UpdateFipProposalVoteByAddress.
func (mr *MockFipRepoMockRecorder) UpdateFipProposalVoteByAddress(ctx, proposalId, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFipProposalVoteByAddress", reflect.TypeOf((*MockFipRepo)(nil).UpdateFipProposalVoteByAddress), ctx, proposalId, address)
}

// UpdateStatusAndGetFipProposal mocks base method.
func (m *MockFipRepo) UpdateStatusAndGetFipProposal(ctx context.Context, proposalId, chainId int64) (*model.FipProposalTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusAndGetFipProposal", ctx, proposalId, chainId)
	ret0, _ := ret[0].(*model.FipProposalTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusAndGetFipProposal indicates an expected call of UpdateStatusAndGetFipProposal.
func (mr *MockFipRepoMockRecorder) UpdateStatusAndGetFipProposal(ctx, proposalId, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusAndGetFipProposal", reflect.TypeOf((*MockFipRepo)(nil).UpdateStatusAndGetFipProposal), ctx, proposalId, chainId)
}

// MockIFipService is a mock of IFipService interface.
type MockIFipService struct {
	ctrl     *gomock.Controller
	recorder *MockIFipServiceMockRecorder
}

// MockIFipServiceMockRecorder is the mock recorder for MockIFipService.
type MockIFipServiceMockRecorder struct {
	mock *MockIFipService
}

// NewMockIFipService creates a new mock instance.
func NewMockIFipService(ctrl *gomock.Controller) *MockIFipService {
	mock := &MockIFipService{ctrl: ctrl}
	mock.recorder = &MockIFipServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFipService) EXPECT() *MockIFipServiceMockRecorder {
	return m.recorder
}

// GetFipEditorList mocks base method.
func (m *MockIFipService) GetFipEditorList(ctx context.Context, req api.FipEditorListReq) ([]api.FipEditorRep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFipEditorList", ctx, req)
	ret0, _ := ret[0].([]api.FipEditorRep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFipEditorList indicates an expected call of GetFipEditorList.
func (mr *MockIFipServiceMockRecorder) GetFipEditorList(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFipEditorList", reflect.TypeOf((*MockIFipService)(nil).GetFipEditorList), ctx, req)
}

// GetFipProposalList mocks base method.
func (m *MockIFipService) GetFipProposalList(ctx context.Context, req api.FipProposalListReq) (*api.CountListRep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFipProposalList", ctx, req)
	ret0, _ := ret[0].(*api.CountListRep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFipProposalList indicates an expected call of GetFipProposalList.
func (mr *MockIFipServiceMockRecorder) GetFipProposalList(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFipProposalList", reflect.TypeOf((*MockIFipService)(nil).GetFipProposalList), ctx, req)
}
