// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: api/rpc/proto/query_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	rpc "powervoting-server/api/rpc/proto"
)

// MockSnapshotClient is a mock of SnapshotClient interface.
type MockSnapshotClient struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotClientMockRecorder
}

// MockSnapshotClientMockRecorder is the mock recorder for MockSnapshotClient.
type MockSnapshotClientMockRecorder struct {
	mock *MockSnapshotClient
}

// NewMockSnapshotClient creates a new mock instance.
func NewMockSnapshotClient(ctrl *gomock.Controller) *MockSnapshotClient {
	mock := &MockSnapshotClient{ctrl: ctrl}
	mock.recorder = &MockSnapshotClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotClient) EXPECT() *MockSnapshotClientMockRecorder {
	return m.recorder
}

// GetAddressPower mocks base method.
func (m *MockSnapshotClient) GetAddressPower(ctx context.Context, in *rpc.AddressPowerRequest, opts ...grpc.CallOption) (*rpc.AddressPowerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAddressPower", varargs...)
	ret0, _ := ret[0].(*rpc.AddressPowerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressPower indicates an expected call of GetAddressPower.
func (mr *MockSnapshotClientMockRecorder) GetAddressPower(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressPower", reflect.TypeOf((*MockSnapshotClient)(nil).GetAddressPower), varargs...)
}

// GetAddressPowerByDay mocks base method.
func (m *MockSnapshotClient) GetAddressPowerByDay(ctx context.Context, in *rpc.AddressPowerByDayRequest, opts ...grpc.CallOption) (*rpc.AddressPowerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAddressPowerByDay", varargs...)
	ret0, _ := ret[0].(*rpc.AddressPowerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressPowerByDay indicates an expected call of GetAddressPowerByDay.
func (mr *MockSnapshotClientMockRecorder) GetAddressPowerByDay(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressPowerByDay", reflect.TypeOf((*MockSnapshotClient)(nil).GetAddressPowerByDay), varargs...)
}

// GetAllAddrPowerByDay mocks base method.
func (m *MockSnapshotClient) GetAllAddrPowerByDay(ctx context.Context, in *rpc.GetAllAddrPowerByDayRequest, opts ...grpc.CallOption) (*rpc.GetAllAddrPowerByDayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllAddrPowerByDay", varargs...)
	ret0, _ := ret[0].(*rpc.GetAllAddrPowerByDayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddrPowerByDay indicates an expected call of GetAllAddrPowerByDay.
func (mr *MockSnapshotClientMockRecorder) GetAllAddrPowerByDay(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddrPowerByDay", reflect.TypeOf((*MockSnapshotClient)(nil).GetAllAddrPowerByDay), varargs...)
}

// GetDataHeight mocks base method.
func (m *MockSnapshotClient) GetDataHeight(ctx context.Context, in *rpc.DataHeightRequest, opts ...grpc.CallOption) (*rpc.DataHeightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataHeight", varargs...)
	ret0, _ := ret[0].(*rpc.DataHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataHeight indicates an expected call of GetDataHeight.
func (mr *MockSnapshotClientMockRecorder) GetDataHeight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataHeight", reflect.TypeOf((*MockSnapshotClient)(nil).GetDataHeight), varargs...)
}

// SyncAddrPower mocks base method.
func (m *MockSnapshotClient) SyncAddrPower(ctx context.Context, in *rpc.SyncAddrPowerRequest, opts ...grpc.CallOption) (*rpc.SyncAddrPowerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncAddrPower", varargs...)
	ret0, _ := ret[0].(*rpc.SyncAddrPowerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncAddrPower indicates an expected call of SyncAddrPower.
func (mr *MockSnapshotClientMockRecorder) SyncAddrPower(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAddrPower", reflect.TypeOf((*MockSnapshotClient)(nil).SyncAddrPower), varargs...)
}

// SyncAllAddrPower mocks base method.
func (m *MockSnapshotClient) SyncAllAddrPower(ctx context.Context, in *rpc.SyncAllAddrPowerRequest, opts ...grpc.CallOption) (*rpc.SyncAllAddrPowerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncAllAddrPower", varargs...)
	ret0, _ := ret[0].(*rpc.SyncAllAddrPowerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncAllAddrPower indicates an expected call of SyncAllAddrPower.
func (mr *MockSnapshotClientMockRecorder) SyncAllAddrPower(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAllAddrPower", reflect.TypeOf((*MockSnapshotClient)(nil).SyncAllAddrPower), varargs...)
}

// SyncAllDeveloperWeight mocks base method.
func (m *MockSnapshotClient) SyncAllDeveloperWeight(ctx context.Context, in *rpc.SyncAllDeveloperWeightRequest, opts ...grpc.CallOption) (*rpc.SyncAllDeveloperWeightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncAllDeveloperWeight", varargs...)
	ret0, _ := ret[0].(*rpc.SyncAllDeveloperWeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncAllDeveloperWeight indicates an expected call of SyncAllDeveloperWeight.
func (mr *MockSnapshotClientMockRecorder) SyncAllDeveloperWeight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAllDeveloperWeight", reflect.TypeOf((*MockSnapshotClient)(nil).SyncAllDeveloperWeight), varargs...)
}

// SyncDateHeight mocks base method.
func (m *MockSnapshotClient) SyncDateHeight(ctx context.Context, in *rpc.SyncDateHeightRequest, opts ...grpc.CallOption) (*rpc.SyncDateHeightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncDateHeight", varargs...)
	ret0, _ := ret[0].(*rpc.SyncDateHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncDateHeight indicates an expected call of SyncDateHeight.
func (mr *MockSnapshotClientMockRecorder) SyncDateHeight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDateHeight", reflect.TypeOf((*MockSnapshotClient)(nil).SyncDateHeight), varargs...)
}

// UploadSnapshotInfoByDay mocks base method.
func (m *MockSnapshotClient) UploadSnapshotInfoByDay(ctx context.Context, in *rpc.UploadSnapshotInfoByDayRequest, opts ...grpc.CallOption) (*rpc.UploadSnapshotInfoByDayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadSnapshotInfoByDay", varargs...)
	ret0, _ := ret[0].(*rpc.UploadSnapshotInfoByDayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadSnapshotInfoByDay indicates an expected call of UploadSnapshotInfoByDay.
func (mr *MockSnapshotClientMockRecorder) UploadSnapshotInfoByDay(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSnapshotInfoByDay", reflect.TypeOf((*MockSnapshotClient)(nil).UploadSnapshotInfoByDay), varargs...)
}

// MockSnapshotServer is a mock of SnapshotServer interface.
type MockSnapshotServer struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotServerMockRecorder
}

// MockSnapshotServerMockRecorder is the mock recorder for MockSnapshotServer.
type MockSnapshotServerMockRecorder struct {
	mock *MockSnapshotServer
}

// NewMockSnapshotServer creates a new mock instance.
func NewMockSnapshotServer(ctrl *gomock.Controller) *MockSnapshotServer {
	mock := &MockSnapshotServer{ctrl: ctrl}
	mock.recorder = &MockSnapshotServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotServer) EXPECT() *MockSnapshotServerMockRecorder {
	return m.recorder
}

// GetAddressPower mocks base method.
func (m *MockSnapshotServer) GetAddressPower(arg0 context.Context, arg1 *rpc.AddressPowerRequest) (*rpc.AddressPowerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressPower", arg0, arg1)
	ret0, _ := ret[0].(*rpc.AddressPowerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressPower indicates an expected call of GetAddressPower.
func (mr *MockSnapshotServerMockRecorder) GetAddressPower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressPower", reflect.TypeOf((*MockSnapshotServer)(nil).GetAddressPower), arg0, arg1)
}

// GetAddressPowerByDay mocks base method.
func (m *MockSnapshotServer) GetAddressPowerByDay(arg0 context.Context, arg1 *rpc.AddressPowerByDayRequest) (*rpc.AddressPowerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressPowerByDay", arg0, arg1)
	ret0, _ := ret[0].(*rpc.AddressPowerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressPowerByDay indicates an expected call of GetAddressPowerByDay.
func (mr *MockSnapshotServerMockRecorder) GetAddressPowerByDay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressPowerByDay", reflect.TypeOf((*MockSnapshotServer)(nil).GetAddressPowerByDay), arg0, arg1)
}

// GetAllAddrPowerByDay mocks base method.
func (m *MockSnapshotServer) GetAllAddrPowerByDay(arg0 context.Context, arg1 *rpc.GetAllAddrPowerByDayRequest) (*rpc.GetAllAddrPowerByDayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddrPowerByDay", arg0, arg1)
	ret0, _ := ret[0].(*rpc.GetAllAddrPowerByDayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddrPowerByDay indicates an expected call of GetAllAddrPowerByDay.
func (mr *MockSnapshotServerMockRecorder) GetAllAddrPowerByDay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddrPowerByDay", reflect.TypeOf((*MockSnapshotServer)(nil).GetAllAddrPowerByDay), arg0, arg1)
}

// GetDataHeight mocks base method.
func (m *MockSnapshotServer) GetDataHeight(arg0 context.Context, arg1 *rpc.DataHeightRequest) (*rpc.DataHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataHeight", arg0, arg1)
	ret0, _ := ret[0].(*rpc.DataHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataHeight indicates an expected call of GetDataHeight.
func (mr *MockSnapshotServerMockRecorder) GetDataHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataHeight", reflect.TypeOf((*MockSnapshotServer)(nil).GetDataHeight), arg0, arg1)
}

// SyncAddrPower mocks base method.
func (m *MockSnapshotServer) SyncAddrPower(arg0 context.Context, arg1 *rpc.SyncAddrPowerRequest) (*rpc.SyncAddrPowerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAddrPower", arg0, arg1)
	ret0, _ := ret[0].(*rpc.SyncAddrPowerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncAddrPower indicates an expected call of SyncAddrPower.
func (mr *MockSnapshotServerMockRecorder) SyncAddrPower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAddrPower", reflect.TypeOf((*MockSnapshotServer)(nil).SyncAddrPower), arg0, arg1)
}

// SyncAllAddrPower mocks base method.
func (m *MockSnapshotServer) SyncAllAddrPower(arg0 context.Context, arg1 *rpc.SyncAllAddrPowerRequest) (*rpc.SyncAllAddrPowerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAllAddrPower", arg0, arg1)
	ret0, _ := ret[0].(*rpc.SyncAllAddrPowerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncAllAddrPower indicates an expected call of SyncAllAddrPower.
func (mr *MockSnapshotServerMockRecorder) SyncAllAddrPower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAllAddrPower", reflect.TypeOf((*MockSnapshotServer)(nil).SyncAllAddrPower), arg0, arg1)
}

// SyncAllDeveloperWeight mocks base method.
func (m *MockSnapshotServer) SyncAllDeveloperWeight(arg0 context.Context, arg1 *rpc.SyncAllDeveloperWeightRequest) (*rpc.SyncAllDeveloperWeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAllDeveloperWeight", arg0, arg1)
	ret0, _ := ret[0].(*rpc.SyncAllDeveloperWeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncAllDeveloperWeight indicates an expected call of SyncAllDeveloperWeight.
func (mr *MockSnapshotServerMockRecorder) SyncAllDeveloperWeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAllDeveloperWeight", reflect.TypeOf((*MockSnapshotServer)(nil).SyncAllDeveloperWeight), arg0, arg1)
}

// SyncDateHeight mocks base method.
func (m *MockSnapshotServer) SyncDateHeight(arg0 context.Context, arg1 *rpc.SyncDateHeightRequest) (*rpc.SyncDateHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDateHeight", arg0, arg1)
	ret0, _ := ret[0].(*rpc.SyncDateHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncDateHeight indicates an expected call of SyncDateHeight.
func (mr *MockSnapshotServerMockRecorder) SyncDateHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDateHeight", reflect.TypeOf((*MockSnapshotServer)(nil).SyncDateHeight), arg0, arg1)
}

// UploadSnapshotInfoByDay mocks base method.
func (m *MockSnapshotServer) UploadSnapshotInfoByDay(arg0 context.Context, arg1 *rpc.UploadSnapshotInfoByDayRequest) (*rpc.UploadSnapshotInfoByDayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSnapshotInfoByDay", arg0, arg1)
	ret0, _ := ret[0].(*rpc.UploadSnapshotInfoByDayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadSnapshotInfoByDay indicates an expected call of UploadSnapshotInfoByDay.
func (mr *MockSnapshotServerMockRecorder) UploadSnapshotInfoByDay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSnapshotInfoByDay", reflect.TypeOf((*MockSnapshotServer)(nil).UploadSnapshotInfoByDay), arg0, arg1)
}

// mustEmbedUnimplementedSnapshotServer mocks base method.
func (m *MockSnapshotServer) mustEmbedUnimplementedSnapshotServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSnapshotServer")
}

// mustEmbedUnimplementedSnapshotServer indicates an expected call of mustEmbedUnimplementedSnapshotServer.
func (mr *MockSnapshotServerMockRecorder) mustEmbedUnimplementedSnapshotServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSnapshotServer", reflect.TypeOf((*MockSnapshotServer)(nil).mustEmbedUnimplementedSnapshotServer))
}

// MockUnsafeSnapshotServer is a mock of UnsafeSnapshotServer interface.
type MockUnsafeSnapshotServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSnapshotServerMockRecorder
}

// MockUnsafeSnapshotServerMockRecorder is the mock recorder for MockUnsafeSnapshotServer.
type MockUnsafeSnapshotServerMockRecorder struct {
	mock *MockUnsafeSnapshotServer
}

// NewMockUnsafeSnapshotServer creates a new mock instance.
func NewMockUnsafeSnapshotServer(ctrl *gomock.Controller) *MockUnsafeSnapshotServer {
	mock := &MockUnsafeSnapshotServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSnapshotServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSnapshotServer) EXPECT() *MockUnsafeSnapshotServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSnapshotServer mocks base method.
func (m *MockUnsafeSnapshotServer) mustEmbedUnimplementedSnapshotServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSnapshotServer")
}

// mustEmbedUnimplementedSnapshotServer indicates an expected call of mustEmbedUnimplementedSnapshotServer.
func (mr *MockUnsafeSnapshotServerMockRecorder) mustEmbedUnimplementedSnapshotServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSnapshotServer", reflect.TypeOf((*MockUnsafeSnapshotServer)(nil).mustEmbedUnimplementedSnapshotServer))
}
