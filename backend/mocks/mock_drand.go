// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: utils/drand.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEncrypted is a mock of IEncrypted interface.
type MockIEncrypted struct {
	ctrl     *gomock.Controller
	recorder *MockIEncryptedMockRecorder
}

// MockIEncryptedMockRecorder is the mock recorder for MockIEncrypted.
type MockIEncryptedMockRecorder struct {
	mock *MockIEncrypted
}

// NewMockIEncrypted creates a new mock instance.
func NewMockIEncrypted(ctrl *gomock.Controller) *MockIEncrypted {
	mock := &MockIEncrypted{ctrl: ctrl}
	mock.recorder = &MockIEncryptedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEncrypted) EXPECT() *MockIEncryptedMockRecorder {
	return m.recorder
}

// DecodeVoteResult mocks base method.
func (m *MockIEncrypted) DecodeVoteResult(voteInfo string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeVoteResult", voteInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeVoteResult indicates an expected call of DecodeVoteResult.
func (mr *MockIEncryptedMockRecorder) DecodeVoteResult(voteInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeVoteResult", reflect.TypeOf((*MockIEncrypted)(nil).DecodeVoteResult), voteInfo)
}

// Decrypt mocks base method.
func (m *MockIEncrypted) Decrypt(decStr string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", decStr)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockIEncryptedMockRecorder) Decrypt(decStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockIEncrypted)(nil).Decrypt), decStr)
}
