// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: service/proposal.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "powervoting-server/model"
	api "powervoting-server/model/api"
)

// MockProposalRepo is a mock of ProposalRepo interface.
type MockProposalRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProposalRepoMockRecorder
}

// MockProposalRepoMockRecorder is the mock recorder for MockProposalRepo.
type MockProposalRepoMockRecorder struct {
	mock *MockProposalRepo
}

// NewMockProposalRepo creates a new mock instance.
func NewMockProposalRepo(ctrl *gomock.Controller) *MockProposalRepo {
	mock := &MockProposalRepo{ctrl: ctrl}
	mock.recorder = &MockProposalRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProposalRepo) EXPECT() *MockProposalRepoMockRecorder {
	return m.recorder
}

// CreateProposal mocks base method.
func (m *MockProposalRepo) CreateProposal(ctx context.Context, in *model.ProposalTbl) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProposal", ctx, in)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProposal indicates an expected call of CreateProposal.
func (mr *MockProposalRepoMockRecorder) CreateProposal(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProposal", reflect.TypeOf((*MockProposalRepo)(nil).CreateProposal), ctx, in)
}

// CreateProposalDraft mocks base method.
func (m *MockProposalRepo) CreateProposalDraft(ctx context.Context, in *model.ProposalDraftTbl) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProposalDraft", ctx, in)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProposalDraft indicates an expected call of CreateProposalDraft.
func (mr *MockProposalRepoMockRecorder) CreateProposalDraft(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProposalDraft", reflect.TypeOf((*MockProposalRepo)(nil).CreateProposalDraft), ctx, in)
}

// DeleteProposalDraft mocks base method.
func (m *MockProposalRepo) DeleteProposalDraft(ctx context.Context, req api.DelProposalDraftReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProposalDraft", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProposalDraft indicates an expected call of DeleteProposalDraft.
func (mr *MockProposalRepoMockRecorder) DeleteProposalDraft(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProposalDraft", reflect.TypeOf((*MockProposalRepo)(nil).DeleteProposalDraft), ctx, req)
}

// GetGitHubNameByCreaters mocks base method.
func (m *MockProposalRepo) GetGitHubNameByCreaters(ctx context.Context, creators []string) (map[string]model.GiuthubInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubNameByCreaters", ctx, creators)
	ret0, _ := ret[0].(map[string]model.GiuthubInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitHubNameByCreaters indicates an expected call of GetGitHubNameByCreaters.
func (mr *MockProposalRepoMockRecorder) GetGitHubNameByCreaters(ctx, creators interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubNameByCreaters", reflect.TypeOf((*MockProposalRepo)(nil).GetGitHubNameByCreaters), ctx, creators)
}

// GetProposalById mocks base method.
func (m *MockProposalRepo) GetProposalById(ctx context.Context, req api.ProposalReq) (*model.ProposalTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalById", ctx, req)
	ret0, _ := ret[0].(*model.ProposalTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalById indicates an expected call of GetProposalById.
func (mr *MockProposalRepoMockRecorder) GetProposalById(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalById", reflect.TypeOf((*MockProposalRepo)(nil).GetProposalById), ctx, req)
}

// GetProposalDraftByAddress mocks base method.
func (m *MockProposalRepo) GetProposalDraftByAddress(ctx context.Context, req api.AddressReq) (*model.ProposalDraftTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalDraftByAddress", ctx, req)
	ret0, _ := ret[0].(*model.ProposalDraftTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalDraftByAddress indicates an expected call of GetProposalDraftByAddress.
func (mr *MockProposalRepoMockRecorder) GetProposalDraftByAddress(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalDraftByAddress", reflect.TypeOf((*MockProposalRepo)(nil).GetProposalDraftByAddress), ctx, req)
}

// GetProposalListWithPagination mocks base method.
func (m *MockProposalRepo) GetProposalListWithPagination(ctx context.Context, req api.ProposalListReq) ([]model.ProposalWithVoted, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalListWithPagination", ctx, req)
	ret0, _ := ret[0].([]model.ProposalWithVoted)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProposalListWithPagination indicates an expected call of GetProposalListWithPagination.
func (mr *MockProposalRepoMockRecorder) GetProposalListWithPagination(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalListWithPagination", reflect.TypeOf((*MockProposalRepo)(nil).GetProposalListWithPagination), ctx, req)
}

// GetUncountedProposalList mocks base method.
func (m *MockProposalRepo) GetUncountedProposalList(ctx context.Context, chainId, timestamp int64) ([]model.ProposalTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncountedProposalList", ctx, chainId, timestamp)
	ret0, _ := ret[0].([]model.ProposalTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncountedProposalList indicates an expected call of GetUncountedProposalList.
func (mr *MockProposalRepoMockRecorder) GetUncountedProposalList(ctx, chainId, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncountedProposalList", reflect.TypeOf((*MockProposalRepo)(nil).GetUncountedProposalList), ctx, chainId, timestamp)
}

// UpdateProposal mocks base method.
func (m *MockProposalRepo) UpdateProposal(ctx context.Context, in *model.ProposalTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProposal", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProposal indicates an expected call of UpdateProposal.
func (mr *MockProposalRepoMockRecorder) UpdateProposal(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProposal", reflect.TypeOf((*MockProposalRepo)(nil).UpdateProposal), ctx, in)
}

// MockIProposalService is a mock of IProposalService interface.
type MockIProposalService struct {
	ctrl     *gomock.Controller
	recorder *MockIProposalServiceMockRecorder
}

// MockIProposalServiceMockRecorder is the mock recorder for MockIProposalService.
type MockIProposalServiceMockRecorder struct {
	mock *MockIProposalService
}

// NewMockIProposalService creates a new mock instance.
func NewMockIProposalService(ctrl *gomock.Controller) *MockIProposalService {
	mock := &MockIProposalService{ctrl: ctrl}
	mock.recorder = &MockIProposalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProposalService) EXPECT() *MockIProposalServiceMockRecorder {
	return m.recorder
}

// AddDraft mocks base method.
func (m *MockIProposalService) AddDraft(ctx context.Context, req *api.AddProposalDraftReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDraft", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDraft indicates an expected call of AddDraft.
func (mr *MockIProposalServiceMockRecorder) AddDraft(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDraft", reflect.TypeOf((*MockIProposalService)(nil).AddDraft), ctx, req)
}

// DeleteDraft mocks base method.
func (m *MockIProposalService) DeleteDraft(ctx context.Context, req api.DelProposalDraftReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDraft", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDraft indicates an expected call of DeleteDraft.
func (mr *MockIProposalServiceMockRecorder) DeleteDraft(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDraft", reflect.TypeOf((*MockIProposalService)(nil).DeleteDraft), ctx, req)
}

// GetDraft mocks base method.
func (m *MockIProposalService) GetDraft(ctx context.Context, req api.AddressReq) (*api.ProposalDraftRep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDraft", ctx, req)
	ret0, _ := ret[0].(*api.ProposalDraftRep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDraft indicates an expected call of GetDraft.
func (mr *MockIProposalServiceMockRecorder) GetDraft(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDraft", reflect.TypeOf((*MockIProposalService)(nil).GetDraft), ctx, req)
}

// ProposalDetail mocks base method.
func (m *MockIProposalService) ProposalDetail(ctx context.Context, req api.ProposalReq) (*api.ProposalRep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposalDetail", ctx, req)
	ret0, _ := ret[0].(*api.ProposalRep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposalDetail indicates an expected call of ProposalDetail.
func (mr *MockIProposalServiceMockRecorder) ProposalDetail(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposalDetail", reflect.TypeOf((*MockIProposalService)(nil).ProposalDetail), ctx, req)
}

// ProposalList mocks base method.
func (m *MockIProposalService) ProposalList(ctx context.Context, req api.ProposalListReq) (*api.CountListRep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposalList", ctx, req)
	ret0, _ := ret[0].(*api.CountListRep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposalList indicates an expected call of ProposalList.
func (mr *MockIProposalServiceMockRecorder) ProposalList(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposalList", reflect.TypeOf((*MockIProposalService)(nil).ProposalList), ctx, req)
}
