// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.5
// source: query.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Snapshot_GetAddressPower_FullMethodName         = "/rpc.Snapshot/GetAddressPower"
	Snapshot_SyncDateHeight_FullMethodName          = "/rpc.Snapshot/SyncDateHeight"
	Snapshot_SyncAddrPower_FullMethodName           = "/rpc.Snapshot/SyncAddrPower"
	Snapshot_SyncAllAddrPower_FullMethodName        = "/rpc.Snapshot/SyncAllAddrPower"
	Snapshot_UploadSnapshotInfoByDay_FullMethodName = "/rpc.Snapshot/UploadSnapshotInfoByDay"
	Snapshot_GetDataHeight_FullMethodName           = "/rpc.Snapshot/GetDataHeight"
	Snapshot_GetAddressPowerByDay_FullMethodName    = "/rpc.Snapshot/GetAddressPowerByDay"
	Snapshot_GetAllAddrPowerByDay_FullMethodName    = "/rpc.Snapshot/GetAllAddrPowerByDay"
)

// SnapshotClient is the client API for Snapshot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotClient interface {
	GetAddressPower(ctx context.Context, in *AddressPowerRequest, opts ...grpc.CallOption) (*AddressPowerResponse, error)
	SyncDateHeight(ctx context.Context, in *SyncDateHeightRequest, opts ...grpc.CallOption) (*SyncDateHeightResponse, error)
	SyncAddrPower(ctx context.Context, in *SyncAddrPowerRequest, opts ...grpc.CallOption) (*SyncAddrPowerResponse, error)
	SyncAllAddrPower(ctx context.Context, in *SyncAllAddrPowerRequest, opts ...grpc.CallOption) (*SyncAllAddrPowerResponse, error)
	UploadSnapshotInfoByDay(ctx context.Context, in *UploadSnapshotInfoByDayRequest, opts ...grpc.CallOption) (*UploadSnapshotInfoByDayResponse, error)
	GetDataHeight(ctx context.Context, in *DataHeightRequest, opts ...grpc.CallOption) (*DataHeightResponse, error)
	GetAddressPowerByDay(ctx context.Context, in *AddressPowerByDayRequest, opts ...grpc.CallOption) (*AddressPowerResponse, error)
	GetAllAddrPowerByDay(ctx context.Context, in *GetAllAddrPowerByDayRequest, opts ...grpc.CallOption) (*GetAllAddrPowerByDayResponse, error)
}

type snapshotClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotClient(cc grpc.ClientConnInterface) SnapshotClient {
	return &snapshotClient{cc}
}

func (c *snapshotClient) GetAddressPower(ctx context.Context, in *AddressPowerRequest, opts ...grpc.CallOption) (*AddressPowerResponse, error) {
	out := new(AddressPowerResponse)
	err := c.cc.Invoke(ctx, Snapshot_GetAddressPower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) SyncDateHeight(ctx context.Context, in *SyncDateHeightRequest, opts ...grpc.CallOption) (*SyncDateHeightResponse, error) {
	out := new(SyncDateHeightResponse)
	err := c.cc.Invoke(ctx, Snapshot_SyncDateHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) SyncAddrPower(ctx context.Context, in *SyncAddrPowerRequest, opts ...grpc.CallOption) (*SyncAddrPowerResponse, error) {
	out := new(SyncAddrPowerResponse)
	err := c.cc.Invoke(ctx, Snapshot_SyncAddrPower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) SyncAllAddrPower(ctx context.Context, in *SyncAllAddrPowerRequest, opts ...grpc.CallOption) (*SyncAllAddrPowerResponse, error) {
	out := new(SyncAllAddrPowerResponse)
	err := c.cc.Invoke(ctx, Snapshot_SyncAllAddrPower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) UploadSnapshotInfoByDay(ctx context.Context, in *UploadSnapshotInfoByDayRequest, opts ...grpc.CallOption) (*UploadSnapshotInfoByDayResponse, error) {
	out := new(UploadSnapshotInfoByDayResponse)
	err := c.cc.Invoke(ctx, Snapshot_UploadSnapshotInfoByDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) GetDataHeight(ctx context.Context, in *DataHeightRequest, opts ...grpc.CallOption) (*DataHeightResponse, error) {
	out := new(DataHeightResponse)
	err := c.cc.Invoke(ctx, Snapshot_GetDataHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) GetAddressPowerByDay(ctx context.Context, in *AddressPowerByDayRequest, opts ...grpc.CallOption) (*AddressPowerResponse, error) {
	out := new(AddressPowerResponse)
	err := c.cc.Invoke(ctx, Snapshot_GetAddressPowerByDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotClient) GetAllAddrPowerByDay(ctx context.Context, in *GetAllAddrPowerByDayRequest, opts ...grpc.CallOption) (*GetAllAddrPowerByDayResponse, error) {
	out := new(GetAllAddrPowerByDayResponse)
	err := c.cc.Invoke(ctx, Snapshot_GetAllAddrPowerByDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotServer is the server API for Snapshot service.
// All implementations must embed UnimplementedSnapshotServer
// for forward compatibility
type SnapshotServer interface {
	GetAddressPower(context.Context, *AddressPowerRequest) (*AddressPowerResponse, error)
	SyncDateHeight(context.Context, *SyncDateHeightRequest) (*SyncDateHeightResponse, error)
	SyncAddrPower(context.Context, *SyncAddrPowerRequest) (*SyncAddrPowerResponse, error)
	SyncAllAddrPower(context.Context, *SyncAllAddrPowerRequest) (*SyncAllAddrPowerResponse, error)
	UploadSnapshotInfoByDay(context.Context, *UploadSnapshotInfoByDayRequest) (*UploadSnapshotInfoByDayResponse, error)
	GetDataHeight(context.Context, *DataHeightRequest) (*DataHeightResponse, error)
	GetAddressPowerByDay(context.Context, *AddressPowerByDayRequest) (*AddressPowerResponse, error)
	GetAllAddrPowerByDay(context.Context, *GetAllAddrPowerByDayRequest) (*GetAllAddrPowerByDayResponse, error)
	mustEmbedUnimplementedSnapshotServer()
}

// UnimplementedSnapshotServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotServer struct {
}

func (UnimplementedSnapshotServer) GetAddressPower(context.Context, *AddressPowerRequest) (*AddressPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressPower not implemented")
}
func (UnimplementedSnapshotServer) SyncDateHeight(context.Context, *SyncDateHeightRequest) (*SyncDateHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDateHeight not implemented")
}
func (UnimplementedSnapshotServer) SyncAddrPower(context.Context, *SyncAddrPowerRequest) (*SyncAddrPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAddrPower not implemented")
}
func (UnimplementedSnapshotServer) SyncAllAddrPower(context.Context, *SyncAllAddrPowerRequest) (*SyncAllAddrPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAllAddrPower not implemented")
}
func (UnimplementedSnapshotServer) UploadSnapshotInfoByDay(context.Context, *UploadSnapshotInfoByDayRequest) (*UploadSnapshotInfoByDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSnapshotInfoByDay not implemented")
}
func (UnimplementedSnapshotServer) GetDataHeight(context.Context, *DataHeightRequest) (*DataHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataHeight not implemented")
}
func (UnimplementedSnapshotServer) GetAddressPowerByDay(context.Context, *AddressPowerByDayRequest) (*AddressPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressPowerByDay not implemented")
}
func (UnimplementedSnapshotServer) GetAllAddrPowerByDay(context.Context, *GetAllAddrPowerByDayRequest) (*GetAllAddrPowerByDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAddrPowerByDay not implemented")
}
func (UnimplementedSnapshotServer) mustEmbedUnimplementedSnapshotServer() {}

// UnsafeSnapshotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotServer will
// result in compilation errors.
type UnsafeSnapshotServer interface {
	mustEmbedUnimplementedSnapshotServer()
}

func RegisterSnapshotServer(s grpc.ServiceRegistrar, srv SnapshotServer) {
	s.RegisterService(&Snapshot_ServiceDesc, srv)
}

func _Snapshot_GetAddressPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).GetAddressPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Snapshot_GetAddressPower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).GetAddressPower(ctx, req.(*AddressPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_SyncDateHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncDateHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).SyncDateHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Snapshot_SyncDateHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).SyncDateHeight(ctx, req.(*SyncDateHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_SyncAddrPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAddrPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).SyncAddrPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Snapshot_SyncAddrPower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).SyncAddrPower(ctx, req.(*SyncAddrPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_SyncAllAddrPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAllAddrPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).SyncAllAddrPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Snapshot_SyncAllAddrPower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).SyncAllAddrPower(ctx, req.(*SyncAllAddrPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_UploadSnapshotInfoByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSnapshotInfoByDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).UploadSnapshotInfoByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Snapshot_UploadSnapshotInfoByDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).UploadSnapshotInfoByDay(ctx, req.(*UploadSnapshotInfoByDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_GetDataHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).GetDataHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Snapshot_GetDataHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).GetDataHeight(ctx, req.(*DataHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_GetAddressPowerByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressPowerByDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).GetAddressPowerByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Snapshot_GetAddressPowerByDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).GetAddressPowerByDay(ctx, req.(*AddressPowerByDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snapshot_GetAllAddrPowerByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAddrPowerByDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServer).GetAllAddrPowerByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Snapshot_GetAllAddrPowerByDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServer).GetAllAddrPowerByDay(ctx, req.(*GetAllAddrPowerByDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Snapshot_ServiceDesc is the grpc.ServiceDesc for Snapshot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Snapshot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Snapshot",
	HandlerType: (*SnapshotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddressPower",
			Handler:    _Snapshot_GetAddressPower_Handler,
		},
		{
			MethodName: "SyncDateHeight",
			Handler:    _Snapshot_SyncDateHeight_Handler,
		},
		{
			MethodName: "SyncAddrPower",
			Handler:    _Snapshot_SyncAddrPower_Handler,
		},
		{
			MethodName: "SyncAllAddrPower",
			Handler:    _Snapshot_SyncAllAddrPower_Handler,
		},
		{
			MethodName: "UploadSnapshotInfoByDay",
			Handler:    _Snapshot_UploadSnapshotInfoByDay_Handler,
		},
		{
			MethodName: "GetDataHeight",
			Handler:    _Snapshot_GetDataHeight_Handler,
		},
		{
			MethodName: "GetAddressPowerByDay",
			Handler:    _Snapshot_GetAddressPowerByDay_Handler,
		},
		{
			MethodName: "GetAllAddrPowerByDay",
			Handler:    _Snapshot_GetAllAddrPowerByDay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query.proto",
}
