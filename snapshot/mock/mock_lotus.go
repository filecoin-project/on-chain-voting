// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/lotus.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "power-snapshot/internal/model"
	types "power-snapshot/utils/types"
)

// MockLotusRepo is a mock of LotusRepo interface.
type MockLotusRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLotusRepoMockRecorder
}

// MockLotusRepoMockRecorder is the mock recorder for MockLotusRepo.
type MockLotusRepoMockRecorder struct {
	mock *MockLotusRepo
}

// NewMockLotusRepo creates a new mock instance.
func NewMockLotusRepo(ctrl *gomock.Controller) *MockLotusRepo {
	mock := &MockLotusRepo{ctrl: ctrl}
	mock.recorder = &MockLotusRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLotusRepo) EXPECT() *MockLotusRepoMockRecorder {
	return m.recorder
}

// GetAddrBalanceBySpecialHeight mocks base method.
func (m *MockLotusRepo) GetAddrBalanceBySpecialHeight(ctx context.Context, addr string, netId, height int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrBalanceBySpecialHeight", ctx, addr, netId, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrBalanceBySpecialHeight indicates an expected call of GetAddrBalanceBySpecialHeight.
func (mr *MockLotusRepoMockRecorder) GetAddrBalanceBySpecialHeight(ctx, addr, netId, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrBalanceBySpecialHeight", reflect.TypeOf((*MockLotusRepo)(nil).GetAddrBalanceBySpecialHeight), ctx, addr, netId, height)
}

// GetBlockHeader mocks base method.
func (m *MockLotusRepo) GetBlockHeader(ctx context.Context, netId, height int64) (models.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeader", ctx, netId, height)
	ret0, _ := ret[0].(models.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeader indicates an expected call of GetBlockHeader.
func (mr *MockLotusRepoMockRecorder) GetBlockHeader(ctx, netId, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeader", reflect.TypeOf((*MockLotusRepo)(nil).GetBlockHeader), ctx, netId, height)
}

// GetDealsByHeight mocks base method.
func (m *MockLotusRepo) GetDealsByHeight(ctx context.Context, netId, height int64) (types.StateMarketDeals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDealsByHeight", ctx, netId, height)
	ret0, _ := ret[0].(types.StateMarketDeals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDealsByHeight indicates an expected call of GetDealsByHeight.
func (mr *MockLotusRepoMockRecorder) GetDealsByHeight(ctx, netId, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDealsByHeight", reflect.TypeOf((*MockLotusRepo)(nil).GetDealsByHeight), ctx, netId, height)
}

// GetMinerPowerByHeight mocks base method.
func (m *MockLotusRepo) GetMinerPowerByHeight(ctx context.Context, netId int64, addr string, tipsetKey []interface{}) (models.LotusMinerPower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinerPowerByHeight", ctx, netId, addr, tipsetKey)
	ret0, _ := ret[0].(models.LotusMinerPower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinerPowerByHeight indicates an expected call of GetMinerPowerByHeight.
func (mr *MockLotusRepoMockRecorder) GetMinerPowerByHeight(ctx, netId, addr, tipsetKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinerPowerByHeight", reflect.TypeOf((*MockLotusRepo)(nil).GetMinerPowerByHeight), ctx, netId, addr, tipsetKey)
}

// GetNewestHeight mocks base method.
func (m *MockLotusRepo) GetNewestHeight(ctx context.Context, netId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewestHeight", ctx, netId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewestHeight indicates an expected call of GetNewestHeight.
func (mr *MockLotusRepoMockRecorder) GetNewestHeight(ctx, netId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewestHeight", reflect.TypeOf((*MockLotusRepo)(nil).GetNewestHeight), ctx, netId)
}

// GetTipSetByHeight mocks base method.
func (m *MockLotusRepo) GetTipSetByHeight(ctx context.Context, netId, height int64) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTipSetByHeight", ctx, netId, height)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTipSetByHeight indicates an expected call of GetTipSetByHeight.
func (mr *MockLotusRepoMockRecorder) GetTipSetByHeight(ctx, netId, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTipSetByHeight", reflect.TypeOf((*MockLotusRepo)(nil).GetTipSetByHeight), ctx, netId, height)
}

// GetWalletBalanceByHeight mocks base method.
func (m *MockLotusRepo) GetWalletBalanceByHeight(ctx context.Context, id string, netId, height int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalanceByHeight", ctx, id, netId, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalanceByHeight indicates an expected call of GetWalletBalanceByHeight.
func (mr *MockLotusRepoMockRecorder) GetWalletBalanceByHeight(ctx, id, netId, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalanceByHeight", reflect.TypeOf((*MockLotusRepo)(nil).GetWalletBalanceByHeight), ctx, id, netId, height)
}
