// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/query.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "power-snapshot/internal/model"
)

// MockQueryRepo is a mock of QueryRepo interface.
type MockQueryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockQueryRepoMockRecorder
}

// MockQueryRepoMockRecorder is the mock recorder for MockQueryRepo.
type MockQueryRepoMockRecorder struct {
	mock *MockQueryRepo
}

// NewMockQueryRepo creates a new mock instance.
func NewMockQueryRepo(ctrl *gomock.Controller) *MockQueryRepo {
	mock := &MockQueryRepo{ctrl: ctrl}
	mock.recorder = &MockQueryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryRepo) EXPECT() *MockQueryRepoMockRecorder {
	return m.recorder
}

// GetAddressPower mocks base method.
func (m *MockQueryRepo) GetAddressPower(ctx context.Context, netId int64, address, dayStr string) (*models.SyncPower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressPower", ctx, netId, address, dayStr)
	ret0, _ := ret[0].(*models.SyncPower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressPower indicates an expected call of GetAddressPower.
func (mr *MockQueryRepoMockRecorder) GetAddressPower(ctx, netId, address, dayStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressPower", reflect.TypeOf((*MockQueryRepo)(nil).GetAddressPower), ctx, netId, address, dayStr)
}

// GetAddressPowerByDay mocks base method.
func (m *MockQueryRepo) GetAddressPowerByDay(ctx context.Context, chainId int64, dayStr string) ([]models.SyncPower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressPowerByDay", ctx, chainId, dayStr)
	ret0, _ := ret[0].([]models.SyncPower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressPowerByDay indicates an expected call of GetAddressPowerByDay.
func (mr *MockQueryRepoMockRecorder) GetAddressPowerByDay(ctx, chainId, dayStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressPowerByDay", reflect.TypeOf((*MockQueryRepo)(nil).GetAddressPowerByDay), ctx, chainId, dayStr)
}

// GetDevPowerByDay mocks base method.
func (m *MockQueryRepo) GetDevPowerByDay(ctx context.Context, dayStr string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevPowerByDay", ctx, dayStr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevPowerByDay indicates an expected call of GetDevPowerByDay.
func (mr *MockQueryRepoMockRecorder) GetDevPowerByDay(ctx, dayStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevPowerByDay", reflect.TypeOf((*MockQueryRepo)(nil).GetDevPowerByDay), ctx, dayStr)
}

// GetDeveloperWeights mocks base method.
func (m *MockQueryRepo) GetDeveloperWeights(ctx context.Context, dateStr string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeveloperWeights", ctx, dateStr)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeveloperWeights indicates an expected call of GetDeveloperWeights.
func (mr *MockQueryRepoMockRecorder) GetDeveloperWeights(ctx, dateStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeveloperWeights", reflect.TypeOf((*MockQueryRepo)(nil).GetDeveloperWeights), ctx, dateStr)
}
