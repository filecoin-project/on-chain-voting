// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/base.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jsonrpc "github.com/ybbus/jsonrpc/v3"

	models "power-snapshot/internal/model"
	types "power-snapshot/utils/types"
)

// MockBaseRepo is a mock of BaseRepo interface.
type MockBaseRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBaseRepoMockRecorder
}

// MockBaseRepoMockRecorder is the mock recorder for MockBaseRepo.
type MockBaseRepoMockRecorder struct {
	mock *MockBaseRepo
}

// NewMockBaseRepo creates a new mock instance.
func NewMockBaseRepo(ctrl *gomock.Controller) *MockBaseRepo {
	mock := &MockBaseRepo{ctrl: ctrl}
	mock.recorder = &MockBaseRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseRepo) EXPECT() *MockBaseRepoMockRecorder {
	return m.recorder
}

// GetDateHeightMap mocks base method.
func (m *MockBaseRepo) GetDateHeightMap(ctx context.Context, netId int64) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDateHeightMap", ctx, netId)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDateHeightMap indicates an expected call of GetDateHeightMap.
func (mr *MockBaseRepoMockRecorder) GetDateHeightMap(ctx, netId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDateHeightMap", reflect.TypeOf((*MockBaseRepo)(nil).GetDateHeightMap), ctx, netId)
}

// GetDealsFromLocal mocks base method.
func (m *MockBaseRepo) GetDealsFromLocal(ctx context.Context, netId int64, dayStr string) (types.StateMarketDeals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDealsFromLocal", ctx, netId, dayStr)
	ret0, _ := ret[0].(types.StateMarketDeals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDealsFromLocal indicates an expected call of GetDealsFromLocal.
func (mr *MockBaseRepoMockRecorder) GetDealsFromLocal(ctx, netId, dayStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDealsFromLocal", reflect.TypeOf((*MockBaseRepo)(nil).GetDealsFromLocal), ctx, netId, dayStr)
}

// GetDeveloperWeights mocks base method.
func (m *MockBaseRepo) GetDeveloperWeights(ctx context.Context, netId int64, dayStr string) ([]models.Nodes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeveloperWeights", ctx, netId, dayStr)
	ret0, _ := ret[0].([]models.Nodes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeveloperWeights indicates an expected call of GetDeveloperWeights.
func (mr *MockBaseRepoMockRecorder) GetDeveloperWeights(ctx, netId, dayStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeveloperWeights", reflect.TypeOf((*MockBaseRepo)(nil).GetDeveloperWeights), ctx, netId, dayStr)
}

// GetLotusClient mocks base method.
func (m *MockBaseRepo) GetLotusClient(ctx context.Context, netId int64) (jsonrpc.RPCClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLotusClient", ctx, netId)
	ret0, _ := ret[0].(jsonrpc.RPCClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLotusClient indicates an expected call of GetLotusClient.
func (mr *MockBaseRepoMockRecorder) GetLotusClient(ctx, netId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLotusClient", reflect.TypeOf((*MockBaseRepo)(nil).GetLotusClient), ctx, netId)
}

// SaveToLocalFile mocks base method.
func (m *MockBaseRepo) SaveToLocalFile(ctx context.Context, netId int64, dayStr, t string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToLocalFile", ctx, netId, dayStr, t, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveToLocalFile indicates an expected call of SaveToLocalFile.
func (mr *MockBaseRepoMockRecorder) SaveToLocalFile(ctx, netId, dayStr, t, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToLocalFile", reflect.TypeOf((*MockBaseRepo)(nil).SaveToLocalFile), ctx, netId, dayStr, t, data)
}

// SetDateHeightMap mocks base method.
func (m *MockBaseRepo) SetDateHeightMap(ctx context.Context, netId int64, height map[string]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDateHeightMap", ctx, netId, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDateHeightMap indicates an expected call of SetDateHeightMap.
func (mr *MockBaseRepoMockRecorder) SetDateHeightMap(ctx, netId, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDateHeightMap", reflect.TypeOf((*MockBaseRepo)(nil).SetDateHeightMap), ctx, netId, height)
}

// MockMysqlRepo is a mock of MysqlRepo interface.
type MockMysqlRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlRepoMockRecorder
}

// MockMysqlRepoMockRecorder is the mock recorder for MockMysqlRepo.
type MockMysqlRepoMockRecorder struct {
	mock *MockMysqlRepo
}

// NewMockMysqlRepo creates a new mock instance.
func NewMockMysqlRepo(ctrl *gomock.Controller) *MockMysqlRepo {
	mock := &MockMysqlRepo{ctrl: ctrl}
	mock.recorder = &MockMysqlRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysqlRepo) EXPECT() *MockMysqlRepoMockRecorder {
	return m.recorder
}

// CreateSnapshotBackup mocks base method.
func (m *MockMysqlRepo) CreateSnapshotBackup(ctx context.Context, in models.SnapshotBackupTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotBackup", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapshotBackup indicates an expected call of CreateSnapshotBackup.
func (mr *MockMysqlRepoMockRecorder) CreateSnapshotBackup(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotBackup", reflect.TypeOf((*MockMysqlRepo)(nil).CreateSnapshotBackup), ctx, in)
}

// GetSnapshotBackupList mocks base method.
func (m *MockMysqlRepo) GetSnapshotBackupList(ctx context.Context, chainId int64) ([]models.SnapshotBackupTbl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotBackupList", ctx, chainId)
	ret0, _ := ret[0].([]models.SnapshotBackupTbl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotBackupList indicates an expected call of GetSnapshotBackupList.
func (mr *MockMysqlRepoMockRecorder) GetSnapshotBackupList(ctx, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotBackupList", reflect.TypeOf((*MockMysqlRepo)(nil).GetSnapshotBackupList), ctx, chainId)
}

// UpdateSnapshotBackup mocks base method.
func (m *MockMysqlRepo) UpdateSnapshotBackup(ctx context.Context, in models.SnapshotBackupTbl) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshotBackup", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnapshotBackup indicates an expected call of UpdateSnapshotBackup.
func (mr *MockMysqlRepoMockRecorder) UpdateSnapshotBackup(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshotBackup", reflect.TypeOf((*MockMysqlRepo)(nil).UpdateSnapshotBackup), ctx, in)
}

// MockContractRepo is a mock of ContractRepo interface.
type MockContractRepo struct {
	ctrl     *gomock.Controller
	recorder *MockContractRepoMockRecorder
}

// MockContractRepoMockRecorder is the mock recorder for MockContractRepo.
type MockContractRepoMockRecorder struct {
	mock *MockContractRepo
}

// NewMockContractRepo creates a new mock instance.
func NewMockContractRepo(ctrl *gomock.Controller) *MockContractRepo {
	mock := &MockContractRepo{ctrl: ctrl}
	mock.recorder = &MockContractRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractRepo) EXPECT() *MockContractRepoMockRecorder {
	return m.recorder
}

// GetExpirationData mocks base method.
func (m *MockContractRepo) GetExpirationData() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpirationData")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpirationData indicates an expected call of GetExpirationData.
func (mr *MockContractRepoMockRecorder) GetExpirationData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpirationData", reflect.TypeOf((*MockContractRepo)(nil).GetExpirationData))
}

// GetGithubRepoInfo mocks base method.
func (m *MockContractRepo) GetGithubRepoInfo(name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGithubRepoInfo", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubRepoInfo indicates an expected call of GetGithubRepoInfo.
func (mr *MockContractRepoMockRecorder) GetGithubRepoInfo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubRepoInfo", reflect.TypeOf((*MockContractRepo)(nil).GetGithubRepoInfo), name)
}

// GetSnapshotHeight mocks base method.
func (m *MockContractRepo) GetSnapshotHeight(dateStr string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotHeight", dateStr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotHeight indicates an expected call of GetSnapshotHeight.
func (mr *MockContractRepoMockRecorder) GetSnapshotHeight(dateStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotHeight", reflect.TypeOf((*MockContractRepo)(nil).GetSnapshotHeight), dateStr)
}

// SetSnapshotHeight mocks base method.
func (m *MockContractRepo) SetSnapshotHeight(dateStr string, height uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnapshotHeight", dateStr, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSnapshotHeight indicates an expected call of SetSnapshotHeight.
func (mr *MockContractRepoMockRecorder) SetSnapshotHeight(dateStr, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapshotHeight", reflect.TypeOf((*MockContractRepo)(nil).SetSnapshotHeight), dateStr, height)
}
