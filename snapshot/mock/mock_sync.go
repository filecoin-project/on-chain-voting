// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/sync.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jetstream "github.com/nats-io/nats.go/jetstream"

	models "power-snapshot/internal/model"
)

// MockSyncRepo is a mock of SyncRepo interface.
type MockSyncRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSyncRepoMockRecorder
}

// MockSyncRepoMockRecorder is the mock recorder for MockSyncRepo.
type MockSyncRepoMockRecorder struct {
	mock *MockSyncRepo
}

// NewMockSyncRepo creates a new mock instance.
func NewMockSyncRepo(ctrl *gomock.Controller) *MockSyncRepo {
	mock := &MockSyncRepo{ctrl: ctrl}
	mock.recorder = &MockSyncRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncRepo) EXPECT() *MockSyncRepoMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockSyncRepo) AddTask(ctx context.Context, netId int64, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", ctx, netId, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask.
func (mr *MockSyncRepoMockRecorder) AddTask(ctx, netId, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockSyncRepo)(nil).AddTask), ctx, netId, task)
}

// ExistDeveloperWeights mocks base method.
func (m *MockSyncRepo) ExistDeveloperWeights(ctx context.Context, dateStr string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistDeveloperWeights", ctx, dateStr)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistDeveloperWeights indicates an expected call of ExistDeveloperWeights.
func (mr *MockSyncRepoMockRecorder) ExistDeveloperWeights(ctx, dateStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistDeveloperWeights", reflect.TypeOf((*MockSyncRepo)(nil).ExistDeveloperWeights), ctx, dateStr)
}

// GetAddrPower mocks base method.
func (m *MockSyncRepo) GetAddrPower(ctx context.Context, netId int64, addr string) (map[string]models.SyncPower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrPower", ctx, netId, addr)
	ret0, _ := ret[0].(map[string]models.SyncPower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrPower indicates an expected call of GetAddrPower.
func (mr *MockSyncRepoMockRecorder) GetAddrPower(ctx, netId, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrPower", reflect.TypeOf((*MockSyncRepo)(nil).GetAddrPower), ctx, netId, addr)
}

// GetAddrSyncedDate mocks base method.
func (m *MockSyncRepo) GetAddrSyncedDate(ctx context.Context, netId int64, addr string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrSyncedDate", ctx, netId, addr)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrSyncedDate indicates an expected call of GetAddrSyncedDate.
func (mr *MockSyncRepoMockRecorder) GetAddrSyncedDate(ctx, netId, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrSyncedDate", reflect.TypeOf((*MockSyncRepo)(nil).GetAddrSyncedDate), ctx, netId, addr)
}

// GetAllAddrSyncedDateMap mocks base method.
func (m *MockSyncRepo) GetAllAddrSyncedDateMap(ctx context.Context, netId int64) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddrSyncedDateMap", ctx, netId)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddrSyncedDateMap indicates an expected call of GetAllAddrSyncedDateMap.
func (mr *MockSyncRepoMockRecorder) GetAllAddrSyncedDateMap(ctx, netId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddrSyncedDateMap", reflect.TypeOf((*MockSyncRepo)(nil).GetAllAddrSyncedDateMap), ctx, netId)
}

// GetDeveloperWeights mocks base method.
func (m *MockSyncRepo) GetDeveloperWeights(ctx context.Context, dateStr string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeveloperWeights", ctx, dateStr)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeveloperWeights indicates an expected call of GetDeveloperWeights.
func (mr *MockSyncRepoMockRecorder) GetDeveloperWeights(ctx, dateStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeveloperWeights", reflect.TypeOf((*MockSyncRepo)(nil).GetDeveloperWeights), ctx, dateStr)
}

// GetTask mocks base method.
func (m *MockSyncRepo) GetTask(ctx context.Context, netId int64) (jetstream.MessageBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, netId)
	ret0, _ := ret[0].(jetstream.MessageBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockSyncRepoMockRecorder) GetTask(ctx, netId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockSyncRepo)(nil).GetTask), ctx, netId)
}

// GetUserDeveloperWeights mocks base method.
func (m *MockSyncRepo) GetUserDeveloperWeights(ctx context.Context, dateStr, username string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDeveloperWeights", ctx, dateStr, username)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDeveloperWeights indicates an expected call of GetUserDeveloperWeights.
func (mr *MockSyncRepoMockRecorder) GetUserDeveloperWeights(ctx, dateStr, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDeveloperWeights", reflect.TypeOf((*MockSyncRepo)(nil).GetUserDeveloperWeights), ctx, dateStr, username)
}

// SetAddrPower mocks base method.
func (m *MockSyncRepo) SetAddrPower(ctx context.Context, netId int64, addr string, in map[string]models.SyncPower) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAddrPower", ctx, netId, addr, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAddrPower indicates an expected call of SetAddrPower.
func (mr *MockSyncRepoMockRecorder) SetAddrPower(ctx, netId, addr, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddrPower", reflect.TypeOf((*MockSyncRepo)(nil).SetAddrPower), ctx, netId, addr, in)
}

// SetAddrSyncedDate mocks base method.
func (m *MockSyncRepo) SetAddrSyncedDate(ctx context.Context, netId int64, addr string, dates []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAddrSyncedDate", ctx, netId, addr, dates)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAddrSyncedDate indicates an expected call of SetAddrSyncedDate.
func (mr *MockSyncRepoMockRecorder) SetAddrSyncedDate(ctx, netId, addr, dates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddrSyncedDate", reflect.TypeOf((*MockSyncRepo)(nil).SetAddrSyncedDate), ctx, netId, addr, dates)
}

// SetDeveloperWeights mocks base method.
func (m *MockSyncRepo) SetDeveloperWeights(ctx context.Context, dateStr string, in map[string]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeveloperWeights", ctx, dateStr, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeveloperWeights indicates an expected call of SetDeveloperWeights.
func (mr *MockSyncRepoMockRecorder) SetDeveloperWeights(ctx, dateStr, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeveloperWeights", reflect.TypeOf((*MockSyncRepo)(nil).SetDeveloperWeights), ctx, dateStr, in)
}
