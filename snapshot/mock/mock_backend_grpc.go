// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: api/backend.go

// Package mock is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "power-snapshot/internal/model"
)

// MockIBackendGRPC is a mock of IBackendGRPC interface.
type MockIBackendGRPC struct {
	ctrl     *gomock.Controller
	recorder *MockIBackendGRPCMockRecorder
}

// MockIBackendGRPCMockRecorder is the mock recorder for MockIBackendGRPC.
type MockIBackendGRPCMockRecorder struct {
	mock *MockIBackendGRPC
}

// NewMockIBackendGRPC creates a new mock instance.
func NewMockIBackendGRPC(ctrl *gomock.Controller) *MockIBackendGRPC {
	mock := &MockIBackendGRPC{ctrl: ctrl}
	mock.recorder = &MockIBackendGRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBackendGRPC) EXPECT() *MockIBackendGRPCMockRecorder {
	return m.recorder
}

// GetAllVoterAddresss mocks base method.
func (m *MockIBackendGRPC) GetAllVoterAddresss(chainId int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVoterAddresss", chainId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVoterAddresss indicates an expected call of GetAllVoterAddresss.
func (mr *MockIBackendGRPCMockRecorder) GetAllVoterAddresss(chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVoterAddresss", reflect.TypeOf((*MockIBackendGRPC)(nil).GetAllVoterAddresss), chainId)
}

// GetGighubRepoInfo mocks base method.
func (m *MockIBackendGRPC) GetGighubRepoInfo(orgType int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGighubRepoInfo", orgType)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGighubRepoInfo indicates an expected call of GetGighubRepoInfo.
func (mr *MockIBackendGRPCMockRecorder) GetGighubRepoInfo(orgType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGighubRepoInfo", reflect.TypeOf((*MockIBackendGRPC)(nil).GetGighubRepoInfo), orgType)
}

// GetVoterInfo mocks base method.
func (m *MockIBackendGRPC) GetVoterInfo(address string) (models.VoterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoterInfo", address)
	ret0, _ := ret[0].(models.VoterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoterInfo indicates an expected call of GetVoterInfo.
func (mr *MockIBackendGRPCMockRecorder) GetVoterInfo(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoterInfo", reflect.TypeOf((*MockIBackendGRPC)(nil).GetVoterInfo), address)
}
