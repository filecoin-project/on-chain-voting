// Copyright (C) 2023-2024 StorSwift Inc.
// This file is part of the PowerVoting library.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/rate_limit.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGithubLimit is a mock of GithubLimit interface.
type MockGithubLimit struct {
	ctrl     *gomock.Controller
	recorder *MockGithubLimitMockRecorder
}

// MockGithubLimitMockRecorder is the mock recorder for MockGithubLimit.
type MockGithubLimitMockRecorder struct {
	mock *MockGithubLimit
}

// NewMockGithubLimit creates a new mock instance.
func NewMockGithubLimit(ctrl *gomock.Controller) *MockGithubLimit {
	mock := &MockGithubLimit{ctrl: ctrl}
	mock.recorder = &MockGithubLimitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubLimit) EXPECT() *MockGithubLimitMockRecorder {
	return m.recorder
}

// CheckRateLimitBeforeRequest mocks base method.
func (m *MockGithubLimit) CheckRateLimitBeforeRequest(token string) (int32, int32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRateLimitBeforeRequest", token)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int32)
	return ret0, ret1
}

// CheckRateLimitBeforeRequest indicates an expected call of CheckRateLimitBeforeRequest.
func (mr *MockGithubLimitMockRecorder) CheckRateLimitBeforeRequest(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRateLimitBeforeRequest", reflect.TypeOf((*MockGithubLimit)(nil).CheckRateLimitBeforeRequest), token)
}
